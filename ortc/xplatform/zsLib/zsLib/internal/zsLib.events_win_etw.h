//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow disabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level; 
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Windows Vista and later.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider zsLib Event Count 55
//+
EXTERN_C __declspec(selectany) const GUID PROVIDER_ZSLIB = {0x180fc32e, 0x8acd, 0x43ff, {0x82, 0xe7, 0xea, 0x06, 0xd0, 0xc5, 0xeb, 0x7f}};

//
// Channel
//
#define CHANNEL_ZSLIB 0x10

//
// Opcodes
//
#define TASK_EXCEPTION_OPCODE_EXCEPTION 0xa
#define TASK_SOCKET_OPCODE_ACCEPT 0xa
#define TASK_SOCKET_OPCODE_ADOPT 0xb
#define TASK_SOCKET_OPCODE_BIND 0xc
#define TASK_SOCKET_OPCODE_CONNECT 0xd
#define TASK_SOCKET_OPCODE_EVENT 0xe
#define TASK_SOCKET_OPCODE_EXCEPTION 0xf
#define TASK_SOCKET_OPCODE_LISTEN 0x10
#define TASK_SOCKET_OPCODE_OPTION 0x11
#define TASK_SOCKET_OPCODE_ORPHAN 0x12
#define TASK_SOCKET_OPCODE_SHUTDOWN 0x13
#define TASK_TIMER_OPCODE_EVENT 0xa

//
// Tasks
//
#define TASK_EXCEPTION 0x1
#define TASK_MESSAGEQUEUE 0x2
#define TASK_SETTINGS 0x3
#define TASK_SOCKET 0x4
#define TASK_TIMER 0x5

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ExceptionEvent = {0x3e8, 0x0, 0x10, 0x2, 0xa, 0x1, 0x8000000000000000};
#define ExceptionEvent_value 0x3e8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MessageQueueCreate = {0x3e9, 0x0, 0x10, 0x5, 0x1, 0x2, 0x8000000000000000};
#define MessageQueueCreate_value 0x3e9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MessageQueueDestroy = {0x3ea, 0x0, 0x10, 0x5, 0x2, 0x2, 0x8000000000000000};
#define MessageQueueDestroy_value 0x3ea
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MessageQueuePost = {0x3eb, 0x0, 0x10, 0x5, 0x9, 0x2, 0x8000000000000000};
#define MessageQueuePost_value 0x3eb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MessageQueueProcess = {0x3ec, 0x0, 0x10, 0x5, 0xf0, 0x2, 0x8000000000000000};
#define MessageQueueProcess_value 0x3ec
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MessageQueueTotalUnprocessedMessages = {0x3ed, 0x0, 0x10, 0x5, 0x0, 0x2, 0x8000000000000000};
#define MessageQueueTotalUnprocessedMessages_value 0x3ed
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingApply = {0x3ee, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingApply_value 0x3ee
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingApplyDefaults = {0x3ef, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingApplyDefaults_value 0x3ef
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingClear = {0x3f0, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingClear_value 0x3f0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingClearAll = {0x3f1, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingClearAll_value 0x3f1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingGetBool = {0x3f2, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingGetBool_value 0x3f2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingGetDouble = {0x3f3, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingGetDouble_value 0x3f3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingGetFloat = {0x3f4, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingGetFloat_value 0x3f4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingGetInt = {0x3f5, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingGetInt_value 0x3f5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingGetString = {0x3f6, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingGetString_value 0x3f6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingGetUInt = {0x3f7, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingGetUInt_value 0x3f7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingSetBool = {0x3f8, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingSetBool_value 0x3f8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingSetDouble = {0x3f9, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingSetDouble_value 0x3f9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingSetFloat = {0x3fa, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingSetFloat_value 0x3fa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingSetInt = {0x3fb, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingSetInt_value 0x3fb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingSetString = {0x3fc, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingSetString_value 0x3fc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingSetUInt = {0x3fd, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingSetUInt_value 0x3fd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingVerifyExists = {0x3fe, 0x0, 0x10, 0x4, 0x0, 0x3, 0x8000000000000000};
#define SettingVerifyExists_value 0x3fe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SettingVerifyExistsFailed = {0x3ff, 0x0, 0x10, 0x3, 0x0, 0x3, 0x8000000000000000};
#define SettingVerifyExistsFailed_value 0x3ff
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketAccept = {0x400, 0x0, 0x10, 0x4, 0xa, 0x4, 0x8000000000000000};
#define SocketAccept_value 0x400
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketAdopt = {0x401, 0x0, 0x10, 0x4, 0xb, 0x4, 0x8000000000000000};
#define SocketAdopt_value 0x401
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketBind = {0x402, 0x0, 0x10, 0x4, 0x0, 0x4, 0x8000000000000000};
#define SocketBind_value 0x402
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketClose = {0x403, 0x0, 0x10, 0x4, 0x2, 0x4, 0x8000000000000000};
#define SocketClose_value 0x403
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketConnect = {0x404, 0x0, 0x10, 0x4, 0xd, 0x4, 0x8000000000000000};
#define SocketConnect_value 0x404
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketCreate = {0x405, 0x0, 0x10, 0x4, 0x1, 0x4, 0x8000000000000000};
#define SocketCreate_value 0x405
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketError = {0x406, 0x0, 0x10, 0x2, 0xf, 0x4, 0x8000000000000000};
#define SocketError_value 0x406
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketExceptionEvent = {0x407, 0x0, 0x10, 0x2, 0xf, 0x4, 0x8000000000000000};
#define SocketExceptionEvent_value 0x407
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketExceptionReset = {0x408, 0x0, 0x10, 0x2, 0xe, 0x4, 0x8000000000000000};
#define SocketExceptionReset_value 0x408
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketGetLocalAddress = {0x409, 0x0, 0x10, 0x4, 0x0, 0x4, 0x8000000000000000};
#define SocketGetLocalAddress_value 0x409
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketGetOptionFlag = {0x40a, 0x0, 0x10, 0x4, 0x11, 0x4, 0x8000000000000000};
#define SocketGetOptionFlag_value 0x40a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketGetOptionValue = {0x40b, 0x0, 0x10, 0x4, 0x11, 0x4, 0x8000000000000000};
#define SocketGetOptionValue_value 0x40b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketGetOptions = {0x40c, 0x0, 0x10, 0x4, 0x11, 0x4, 0x8000000000000000};
#define SocketGetOptions_value 0x40c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketGetRemoteAddress = {0x40d, 0x0, 0x10, 0x4, 0x0, 0x4, 0x8000000000000000};
#define SocketGetRemoteAddress_value 0x40d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketListen = {0x40e, 0x0, 0x10, 0x4, 0x10, 0x4, 0x8000000000000000};
#define SocketListen_value 0x40e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketOrphan = {0x40f, 0x0, 0x10, 0x4, 0x12, 0x4, 0x8000000000000000};
#define SocketOrphan_value 0x40f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketReadReadyEvent = {0x410, 0x0, 0x10, 0x5, 0xe, 0x4, 0x8000000000000000};
#define SocketReadReadyEvent_value 0x410
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketReadReadyReset = {0x411, 0x0, 0x10, 0x5, 0xe, 0x4, 0x8000000000000000};
#define SocketReadReadyReset_value 0x411
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketRecv = {0x412, 0x0, 0x10, 0x5, 0xf0, 0x4, 0x8000000000000000};
#define SocketRecv_value 0x412
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketRecvFrom = {0x413, 0x0, 0x10, 0x5, 0xf0, 0x4, 0x8000000000000000};
#define SocketRecvFrom_value 0x413
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketSend = {0x414, 0x0, 0x10, 0x5, 0x9, 0x4, 0x8000000000000000};
#define SocketSend_value 0x414
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketSendTo = {0x415, 0x0, 0x10, 0x5, 0x9, 0x4, 0x8000000000000000};
#define SocketSendTo_value 0x415
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketSetOption = {0x416, 0x0, 0x10, 0x4, 0x11, 0x4, 0x8000000000000000};
#define SocketSetOption_value 0x416
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketSetOptionFlag = {0x417, 0x0, 0x10, 0x4, 0x11, 0x4, 0x8000000000000000};
#define SocketSetOptionFlag_value 0x417
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketShutdown = {0x418, 0x0, 0x10, 0x4, 0x13, 0x4, 0x8000000000000000};
#define SocketShutdown_value 0x418
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketWouldBlock = {0x419, 0x0, 0x10, 0x5, 0x0, 0x4, 0x8000000000000000};
#define SocketWouldBlock_value 0x419
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketWriteReadyEvent = {0x41a, 0x0, 0x10, 0x5, 0xe, 0x4, 0x8000000000000000};
#define SocketWriteReadyEvent_value 0x41a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SocketWriteReadyReset = {0x41b, 0x0, 0x10, 0x5, 0xe, 0x4, 0x8000000000000000};
#define SocketWriteReadyReset_value 0x41b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR TimerCreate = {0x41c, 0x0, 0x10, 0x5, 0x1, 0x5, 0x8000000000000000};
#define TimerCreate_value 0x41c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR TimerDestroy = {0x41d, 0x0, 0x10, 0x5, 0x2, 0x5, 0x8000000000000000};
#define TimerDestroy_value 0x41d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR TimerEvent = {0x41e, 0x0, 0x10, 0x5, 0xa, 0x5, 0x8000000000000000};
#define TimerEvent_value 0x41e

//
// Note on Generate Code from Manifest for Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow disabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG zsLibEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG zsLibKeywords[4] = {0x8000000000000000, 0x8000000000000000, 0x8000000000000000, 0x8000000000000000};
EXTERN_C __declspec(selectany) const UCHAR zsLibLevels[4] = {2, 5, 4, 3};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT PROVIDER_ZSLIB_Context = {0, 0, 0, 0, 0, 0, 0, 0, 4, zsLibEnableBits, zsLibKeywords, zsLibLevels};

EXTERN_C __declspec(selectany) REGHANDLE zsLibHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
#pragma warning(push)
#pragma warning(disable:6103)
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function registers the provider with ETW USER mode.

Arguments:
    ProviderId - Provider ID to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}
#pragma warning(pop)


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If provider has not been registered, RegHandle == NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterzsLib
#define EventRegisterzsLib() McGenEventRegister(&PROVIDER_ZSLIB, McGenControlCallbackV2, &PROVIDER_ZSLIB_Context, &zsLibHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterzsLib
#define EventUnregisterzsLib() McGenEventUnregister(&zsLibHandle) 
#endif

//
// Enablement check macro for ExceptionEvent
//

#define EventEnabledExceptionEvent() ((zsLibEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ExceptionEvent
//
#define EventWriteExceptionEvent(_subsystem, _function, _line, message, function, filePath, lineNumber, expression)\
        EventEnabledExceptionEvent() ?\
        Template_ssqsssxs(zsLibHandle, &ExceptionEvent, _subsystem, _function, _line, message, function, filePath, lineNumber, expression)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MessageQueueCreate
//

#define EventEnabledMessageQueueCreate() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MessageQueueCreate
//
#define EventWriteMessageQueueCreate(_subsystem, _function, _line, this)\
        EventEnabledMessageQueueCreate() ?\
        Template_ssqp(zsLibHandle, &MessageQueueCreate, _subsystem, _function, _line, this)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MessageQueueDestroy
//

#define EventEnabledMessageQueueDestroy() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MessageQueueDestroy
//
#define EventWriteMessageQueueDestroy(_subsystem, _function, _line, this)\
        EventEnabledMessageQueueDestroy() ?\
        Template_ssqp(zsLibHandle, &MessageQueueDestroy, _subsystem, _function, _line, this)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MessageQueuePost
//

#define EventEnabledMessageQueuePost() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MessageQueuePost
//
#define EventWriteMessageQueuePost(_subsystem, _function, _line, this)\
        EventEnabledMessageQueuePost() ?\
        Template_ssqp(zsLibHandle, &MessageQueuePost, _subsystem, _function, _line, this)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MessageQueueProcess
//

#define EventEnabledMessageQueueProcess() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MessageQueueProcess
//
#define EventWriteMessageQueueProcess(_subsystem, _function, _line, this)\
        EventEnabledMessageQueueProcess() ?\
        Template_ssqp(zsLibHandle, &MessageQueueProcess, _subsystem, _function, _line, this)\
        : ERROR_SUCCESS\

//
// Enablement check macro for MessageQueueTotalUnprocessedMessages
//

#define EventEnabledMessageQueueTotalUnprocessedMessages() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for MessageQueueTotalUnprocessedMessages
//
#define EventWriteMessageQueueTotalUnprocessedMessages(_subsystem, _function, _line, this, messages)\
        EventEnabledMessageQueueTotalUnprocessedMessages() ?\
        Template_ssqpx(zsLibHandle, &MessageQueueTotalUnprocessedMessages, _subsystem, _function, _line, this, messages)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingApply
//

#define EventEnabledSettingApply() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingApply
//
#define EventWriteSettingApply(_subsystem, _function, _line, id, jsonSettings)\
        EventEnabledSettingApply() ?\
        Template_ssqxs(zsLibHandle, &SettingApply, _subsystem, _function, _line, id, jsonSettings)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingApplyDefaults
//

#define EventEnabledSettingApplyDefaults() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingApplyDefaults
//
#define EventWriteSettingApplyDefaults(_subsystem, _function, _line, id)\
        EventEnabledSettingApplyDefaults() ?\
        Template_ssqx(zsLibHandle, &SettingApplyDefaults, _subsystem, _function, _line, id)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingClear
//

#define EventEnabledSettingClear() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingClear
//
#define EventWriteSettingClear(_subsystem, _function, _line, id, key)\
        EventEnabledSettingClear() ?\
        Template_ssqxs(zsLibHandle, &SettingClear, _subsystem, _function, _line, id, key)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingClearAll
//

#define EventEnabledSettingClearAll() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingClearAll
//
#define EventWriteSettingClearAll(_subsystem, _function, _line, id)\
        EventEnabledSettingClearAll() ?\
        Template_ssqx(zsLibHandle, &SettingClearAll, _subsystem, _function, _line, id)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingGetBool
//

#define EventEnabledSettingGetBool() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingGetBool
//
#define EventWriteSettingGetBool(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingGetBool() ?\
        Template_ssqxst(zsLibHandle, &SettingGetBool, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingGetDouble
//

#define EventEnabledSettingGetDouble() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingGetDouble
//
#define EventWriteSettingGetDouble(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingGetDouble() ?\
        Template_ssqxsg(zsLibHandle, &SettingGetDouble, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingGetFloat
//

#define EventEnabledSettingGetFloat() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingGetFloat
//
#define EventWriteSettingGetFloat(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingGetFloat() ?\
        Template_ssqxsf(zsLibHandle, &SettingGetFloat, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingGetInt
//

#define EventEnabledSettingGetInt() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingGetInt
//
#define EventWriteSettingGetInt(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingGetInt() ?\
        Template_ssqxsi(zsLibHandle, &SettingGetInt, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingGetString
//

#define EventEnabledSettingGetString() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingGetString
//
#define EventWriteSettingGetString(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingGetString() ?\
        Template_ssqxss(zsLibHandle, &SettingGetString, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingGetUInt
//

#define EventEnabledSettingGetUInt() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingGetUInt
//
#define EventWriteSettingGetUInt(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingGetUInt() ?\
        Template_ssqxsx(zsLibHandle, &SettingGetUInt, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingSetBool
//

#define EventEnabledSettingSetBool() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingSetBool
//
#define EventWriteSettingSetBool(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingSetBool() ?\
        Template_ssqxst(zsLibHandle, &SettingSetBool, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingSetDouble
//

#define EventEnabledSettingSetDouble() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingSetDouble
//
#define EventWriteSettingSetDouble(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingSetDouble() ?\
        Template_ssqxsg(zsLibHandle, &SettingSetDouble, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingSetFloat
//

#define EventEnabledSettingSetFloat() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingSetFloat
//
#define EventWriteSettingSetFloat(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingSetFloat() ?\
        Template_ssqxsf(zsLibHandle, &SettingSetFloat, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingSetInt
//

#define EventEnabledSettingSetInt() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingSetInt
//
#define EventWriteSettingSetInt(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingSetInt() ?\
        Template_ssqxsi(zsLibHandle, &SettingSetInt, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingSetString
//

#define EventEnabledSettingSetString() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingSetString
//
#define EventWriteSettingSetString(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingSetString() ?\
        Template_ssqxss(zsLibHandle, &SettingSetString, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingSetUInt
//

#define EventEnabledSettingSetUInt() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingSetUInt
//
#define EventWriteSettingSetUInt(_subsystem, _function, _line, id, key, value)\
        EventEnabledSettingSetUInt() ?\
        Template_ssqxsx(zsLibHandle, &SettingSetUInt, _subsystem, _function, _line, id, key, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingVerifyExists
//

#define EventEnabledSettingVerifyExists() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SettingVerifyExists
//
#define EventWriteSettingVerifyExists(_subsystem, _function, _line, id, key, exists)\
        EventEnabledSettingVerifyExists() ?\
        Template_ssqxst(zsLibHandle, &SettingVerifyExists, _subsystem, _function, _line, id, key, exists)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SettingVerifyExistsFailed
//

#define EventEnabledSettingVerifyExistsFailed() ((zsLibEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for SettingVerifyExistsFailed
//
#define EventWriteSettingVerifyExistsFailed(_subsystem, _function, _line, id, key, exists)\
        EventEnabledSettingVerifyExistsFailed() ?\
        Template_ssqxst(zsLibHandle, &SettingVerifyExistsFailed, _subsystem, _function, _line, id, key, exists)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketAccept
//

#define EventEnabledSocketAccept() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketAccept
//
#define EventWriteSocketAccept(_subsystem, _function, _line, listenSocket, acceptSocket, size, address)\
        EventEnabledSocketAccept() ?\
        Template_ssqxxqb(zsLibHandle, &SocketAccept, _subsystem, _function, _line, listenSocket, acceptSocket, size, address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketAdopt
//

#define EventEnabledSocketAdopt() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketAdopt
//
#define EventWriteSocketAdopt(_subsystem, _function, _line, socket)\
        EventEnabledSocketAdopt() ?\
        Template_ssqx(zsLibHandle, &SocketAdopt, _subsystem, _function, _line, socket)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketBind
//

#define EventEnabledSocketBind() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketBind
//
#define EventWriteSocketBind(_subsystem, _function, _line, socket, result, size, address)\
        EventEnabledSocketBind() ?\
        Template_ssqxiqb(zsLibHandle, &SocketBind, _subsystem, _function, _line, socket, result, size, address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketClose
//

#define EventEnabledSocketClose() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketClose
//
#define EventWriteSocketClose(_subsystem, _function, _line, socket, result)\
        EventEnabledSocketClose() ?\
        Template_ssqxi(zsLibHandle, &SocketClose, _subsystem, _function, _line, socket, result)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketConnect
//

#define EventEnabledSocketConnect() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketConnect
//
#define EventWriteSocketConnect(_subsystem, _function, _line, socket, size, address)\
        EventEnabledSocketConnect() ?\
        Template_ssqxqb(zsLibHandle, &SocketConnect, _subsystem, _function, _line, socket, size, address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketCreate
//

#define EventEnabledSocketCreate() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketCreate
//
#define EventWriteSocketCreate(_subsystem, _function, _line, this, socket, family, type, protocol)\
        EventEnabledSocketCreate() ?\
        Template_ssqpxiii(zsLibHandle, &SocketCreate, _subsystem, _function, _line, this, socket, family, type, protocol)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketError
//

#define EventEnabledSocketError() ((zsLibEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for SocketError
//
#define EventWriteSocketError(_subsystem, _function, _line, socket, error)\
        EventEnabledSocketError() ?\
        Template_ssqxi(zsLibHandle, &SocketError, _subsystem, _function, _line, socket, error)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketExceptionEvent
//

#define EventEnabledSocketExceptionEvent() ((zsLibEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for SocketExceptionEvent
//
#define EventWriteSocketExceptionEvent(_subsystem, _function, _line, this)\
        EventEnabledSocketExceptionEvent() ?\
        Template_ssqp(zsLibHandle, &SocketExceptionEvent, _subsystem, _function, _line, this)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketExceptionReset
//

#define EventEnabledSocketExceptionReset() ((zsLibEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for SocketExceptionReset
//
#define EventWriteSocketExceptionReset(_subsystem, _function, _line, socket)\
        EventEnabledSocketExceptionReset() ?\
        Template_ssqx(zsLibHandle, &SocketExceptionReset, _subsystem, _function, _line, socket)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketGetLocalAddress
//

#define EventEnabledSocketGetLocalAddress() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketGetLocalAddress
//
#define EventWriteSocketGetLocalAddress(_subsystem, _function, _line, socket, result, size, address)\
        EventEnabledSocketGetLocalAddress() ?\
        Template_ssqxiqb(zsLibHandle, &SocketGetLocalAddress, _subsystem, _function, _line, socket, result, size, address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketGetOptionFlag
//

#define EventEnabledSocketGetOptionFlag() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketGetOptionFlag
//
#define EventWriteSocketGetOptionFlag(_subsystem, _function, _line, socket, result, option, value)\
        EventEnabledSocketGetOptionFlag() ?\
        Template_ssqxiii(zsLibHandle, &SocketGetOptionFlag, _subsystem, _function, _line, socket, result, option, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketGetOptionValue
//

#define EventEnabledSocketGetOptionValue() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketGetOptionValue
//
#define EventWriteSocketGetOptionValue(_subsystem, _function, _line, socket, result, option, value)\
        EventEnabledSocketGetOptionValue() ?\
        Template_ssqxiii(zsLibHandle, &SocketGetOptionValue, _subsystem, _function, _line, socket, result, option, value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketGetOptions
//

#define EventEnabledSocketGetOptions() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketGetOptions
//
#define EventWriteSocketGetOptions(_subsystem, _function, _line, socket, result, level, optionName, optionValueSize, optionValue)\
        EventEnabledSocketGetOptions() ?\
        Template_ssqxiiiqb(zsLibHandle, &SocketGetOptions, _subsystem, _function, _line, socket, result, level, optionName, optionValueSize, optionValue)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketGetRemoteAddress
//

#define EventEnabledSocketGetRemoteAddress() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketGetRemoteAddress
//
#define EventWriteSocketGetRemoteAddress(_subsystem, _function, _line, socket, result, size, address)\
        EventEnabledSocketGetRemoteAddress() ?\
        Template_ssqxiqb(zsLibHandle, &SocketGetRemoteAddress, _subsystem, _function, _line, socket, result, size, address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketListen
//

#define EventEnabledSocketListen() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketListen
//
#define EventWriteSocketListen(_subsystem, _function, _line, socket, result)\
        EventEnabledSocketListen() ?\
        Template_ssqxi(zsLibHandle, &SocketListen, _subsystem, _function, _line, socket, result)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketOrphan
//

#define EventEnabledSocketOrphan() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketOrphan
//
#define EventWriteSocketOrphan(_subsystem, _function, _line, socket)\
        EventEnabledSocketOrphan() ?\
        Template_ssqx(zsLibHandle, &SocketOrphan, _subsystem, _function, _line, socket)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketReadReadyEvent
//

#define EventEnabledSocketReadReadyEvent() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketReadReadyEvent
//
#define EventWriteSocketReadReadyEvent(_subsystem, _function, _line, this)\
        EventEnabledSocketReadReadyEvent() ?\
        Template_ssqp(zsLibHandle, &SocketReadReadyEvent, _subsystem, _function, _line, this)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketReadReadyReset
//

#define EventEnabledSocketReadReadyReset() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketReadReadyReset
//
#define EventWriteSocketReadReadyReset(_subsystem, _function, _line, socket)\
        EventEnabledSocketReadReadyReset() ?\
        Template_ssqx(zsLibHandle, &SocketReadReadyReset, _subsystem, _function, _line, socket)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketRecv
//

#define EventEnabledSocketRecv() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketRecv
//
#define EventWriteSocketRecv(_subsystem, _function, _line, socket, result, flags, size, buffer)\
        EventEnabledSocketRecv() ?\
        Template_ssqxixqb(zsLibHandle, &SocketRecv, _subsystem, _function, _line, socket, result, flags, size, buffer)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketRecvFrom
//

#define EventEnabledSocketRecvFrom() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketRecvFrom
//
#define EventWriteSocketRecvFrom(_subsystem, _function, _line, socket, result, flags, size, buffer, addressSize, address)\
        EventEnabledSocketRecvFrom() ?\
        Template_ssqxixqbqb(zsLibHandle, &SocketRecvFrom, _subsystem, _function, _line, socket, result, flags, size, buffer, addressSize, address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketSend
//

#define EventEnabledSocketSend() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketSend
//
#define EventWriteSocketSend(_subsystem, _function, _line, socket, result, flags, size, buffer)\
        EventEnabledSocketSend() ?\
        Template_ssqxixqb(zsLibHandle, &SocketSend, _subsystem, _function, _line, socket, result, flags, size, buffer)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketSendTo
//

#define EventEnabledSocketSendTo() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketSendTo
//
#define EventWriteSocketSendTo(_subsystem, _function, _line, socket, result, flags, size, buffer, addressSize, address)\
        EventEnabledSocketSendTo() ?\
        Template_ssqxixqbqb(zsLibHandle, &SocketSendTo, _subsystem, _function, _line, socket, result, flags, size, buffer, addressSize, address)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketSetOption
//

#define EventEnabledSocketSetOption() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketSetOption
//
#define EventWriteSocketSetOption(_subsystem, _function, _line, socket, result, level, optionName, optionValueSize, optionValue)\
        EventEnabledSocketSetOption() ?\
        Template_ssqxiiiqb(zsLibHandle, &SocketSetOption, _subsystem, _function, _line, socket, result, level, optionName, optionValueSize, optionValue)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketSetOptionFlag
//

#define EventEnabledSocketSetOptionFlag() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketSetOptionFlag
//
#define EventWriteSocketSetOptionFlag(_subsystem, _function, _line, socket, result, option, enabled)\
        EventEnabledSocketSetOptionFlag() ?\
        Template_ssqxiit(zsLibHandle, &SocketSetOptionFlag, _subsystem, _function, _line, socket, result, option, enabled)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketShutdown
//

#define EventEnabledSocketShutdown() ((zsLibEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SocketShutdown
//
#define EventWriteSocketShutdown(_subsystem, _function, _line, socket, result, options)\
        EventEnabledSocketShutdown() ?\
        Template_ssqxii(zsLibHandle, &SocketShutdown, _subsystem, _function, _line, socket, result, options)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketWouldBlock
//

#define EventEnabledSocketWouldBlock() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketWouldBlock
//
#define EventWriteSocketWouldBlock(_subsystem, _function, _line, socket, wouldBlock)\
        EventEnabledSocketWouldBlock() ?\
        Template_ssqxt(zsLibHandle, &SocketWouldBlock, _subsystem, _function, _line, socket, wouldBlock)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketWriteReadyEvent
//

#define EventEnabledSocketWriteReadyEvent() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketWriteReadyEvent
//
#define EventWriteSocketWriteReadyEvent(_subsystem, _function, _line, this)\
        EventEnabledSocketWriteReadyEvent() ?\
        Template_ssqp(zsLibHandle, &SocketWriteReadyEvent, _subsystem, _function, _line, this)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SocketWriteReadyReset
//

#define EventEnabledSocketWriteReadyReset() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for SocketWriteReadyReset
//
#define EventWriteSocketWriteReadyReset(_subsystem, _function, _line, socket)\
        EventEnabledSocketWriteReadyReset() ?\
        Template_ssqx(zsLibHandle, &SocketWriteReadyReset, _subsystem, _function, _line, socket)\
        : ERROR_SUCCESS\

//
// Enablement check macro for TimerCreate
//

#define EventEnabledTimerCreate() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for TimerCreate
//
#define EventWriteTimerCreate(_subsystem, _function, _line, id, repeat, timeoutInMicroseconds)\
        EventEnabledTimerCreate() ?\
        Template_ssqxti(zsLibHandle, &TimerCreate, _subsystem, _function, _line, id, repeat, timeoutInMicroseconds)\
        : ERROR_SUCCESS\

//
// Enablement check macro for TimerDestroy
//

#define EventEnabledTimerDestroy() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for TimerDestroy
//
#define EventWriteTimerDestroy(_subsystem, _function, _line, id)\
        EventEnabledTimerDestroy() ?\
        Template_ssqx(zsLibHandle, &TimerDestroy, _subsystem, _function, _line, id)\
        : ERROR_SUCCESS\

//
// Enablement check macro for TimerEvent
//

#define EventEnabledTimerEvent() ((zsLibEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for TimerEvent
//
#define EventWriteTimerEvent(_subsystem, _function, _line, id)\
        EventEnabledTimerEvent() ?\
        Template_ssqx(zsLibHandle, &TimerEvent, _subsystem, _function, _line, id)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : T_18ab4d9cbf44b3793a322ea183d5a8223cd8fc8f6cf1c8ceb5a3a8defea962d7
//
#ifndef Template_ssqsssxs_def
#define Template_ssqsssxs_def
ETW_INLINE
ULONG
Template_ssqsssxs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_opt_ LPCSTR  _Arg3,
    _In_opt_ LPCSTR  _Arg4,
    _In_opt_ LPCSTR  _Arg5,
    _In_ unsigned __int64  _Arg6,
    _In_opt_ LPCSTR  _Arg7
    )
{
#define ARGUMENT_COUNT_ssqsssxs 8

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqsssxs];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : "NULL",
                        (_Arg3 != NULL) ? (ULONG)((strlen(_Arg3) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : "NULL",
                        (_Arg5 != NULL) ? (ULONG)((strlen(_Arg5) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[7], 
                        (_Arg7 != NULL) ? _Arg7 : "NULL",
                        (_Arg7 != NULL) ? (ULONG)((strlen(_Arg7) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqsssxs, EventData);
}
#endif

//
//Template from manifest : T_3188be8c0ec391881b8ed8cfb772b410af1f87c3e04952d50373524b81c22329
//
#ifndef Template_ssqp_def
#define Template_ssqp_def
ETW_INLINE
ULONG
Template_ssqp(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_opt_ const void *  _Arg3
    )
{
#define ARGUMENT_COUNT_ssqp 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqp];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(PVOID)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqp, EventData);
}
#endif

//
//Template from manifest : T_f30a320a8df40570172dab989826d547e0d6b51e35569e3f2691dacb6b89e560
//
#ifndef Template_ssqpx_def
#define Template_ssqpx_def
ETW_INLINE
ULONG
Template_ssqpx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_opt_ const void *  _Arg3,
    _In_ unsigned __int64  _Arg4
    )
{
#define ARGUMENT_COUNT_ssqpx 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqpx];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqpx, EventData);
}
#endif

//
//Template from manifest : T_2afcef1a922f19e24ecd5c2d57f7836aa03b08dceaf5340be670d08edb5cddcd
//
#ifndef Template_ssqxs_def
#define Template_ssqxs_def
ETW_INLINE
ULONG
Template_ssqxs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ LPCSTR  _Arg4
    )
{
#define ARGUMENT_COUNT_ssqxs 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxs];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxs, EventData);
}
#endif

//
//Template from manifest : T_d6e9d19d647b1cf31797a5c55aba188694db30b00b0141cca3969a88b0e9a69f
//
#ifndef Template_ssqx_def
#define Template_ssqx_def
ETW_INLINE
ULONG
Template_ssqx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3
    )
{
#define ARGUMENT_COUNT_ssqx 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqx];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqx, EventData);
}
#endif

//
//Template from manifest : T_9fb5345ac843049803bf4ebf604b28c6705be3f00abccf954e0aebfa73ec6697
//
#ifndef Template_ssqxst_def
#define Template_ssqxst_def
ETW_INLINE
ULONG
Template_ssqxst(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ LPCSTR  _Arg4,
    _In_ const BOOL  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxst 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxst];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxst, EventData);
}
#endif

//
//Template from manifest : T_4f213152351f398041d309d028150a8417833494e5ee65abe312f0641eafdae0
//
#ifndef Template_ssqxsg_def
#define Template_ssqxsg_def
ETW_INLINE
ULONG
Template_ssqxsg(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ LPCSTR  _Arg4,
    _In_ const double  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxsg 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxsg];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const double)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxsg, EventData);
}
#endif

//
//Template from manifest : T_1375ea5f438a1e3c40a6ddadc979cc50c0e3f2bbca54b06b4971644653c47037
//
#ifndef Template_ssqxsf_def
#define Template_ssqxsf_def
ETW_INLINE
ULONG
Template_ssqxsf(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ LPCSTR  _Arg4,
    _In_ const float  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxsf 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxsf];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const float)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxsf, EventData);
}
#endif

//
//Template from manifest : T_0dd3b3bb207b612f9a1460f2d0f866a3014f9a0e7ecdf4b60c356800423509b9
//
#ifndef Template_ssqxsi_def
#define Template_ssqxsi_def
ETW_INLINE
ULONG
Template_ssqxsi(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ LPCSTR  _Arg4,
    _In_ signed __int64  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxsi 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxsi];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxsi, EventData);
}
#endif

//
//Template from manifest : T_5905782b04bb6fff890615105097526fa7ac8545b26df9138a4b0b06cefa1b49
//
#ifndef Template_ssqxss_def
#define Template_ssqxss_def
ETW_INLINE
ULONG
Template_ssqxss(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ LPCSTR  _Arg4,
    _In_opt_ LPCSTR  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxss 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxss];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5], 
                        (_Arg5 != NULL) ? _Arg5 : "NULL",
                        (_Arg5 != NULL) ? (ULONG)((strlen(_Arg5) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxss, EventData);
}
#endif

//
//Template from manifest : T_2a499d84c30c6cbd2469c2a409dd89d815888ab66b6acbf206305647112b4375
//
#ifndef Template_ssqxsx_def
#define Template_ssqxsx_def
ETW_INLINE
ULONG
Template_ssqxsx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_opt_ LPCSTR  _Arg4,
    _In_ unsigned __int64  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxsx 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxsx];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(unsigned __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxsx, EventData);
}
#endif

//
//Template from manifest : T_6dcdbec0e73ed6429121b65eeafb04a7fde8fe65e0988f2a5803b0df177e8ee7
//
#ifndef Template_ssqxxqb_def
#define Template_ssqxxqb_def
ETW_INLINE
ULONG
Template_ssqxxqb(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ unsigned __int64  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_reads_(_Arg5) const BYTE*  _Arg6
    )
{
#define ARGUMENT_COUNT_ssqxxqb 7

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxxqb];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], _Arg6, (ULONG)sizeof(char)*_Arg5);

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxxqb, EventData);
}
#endif

//
//Template from manifest : T_85304a48a1363e01b8a6b170d56303bffc7e802fa71a66e8ceb1ca9b7837b52f
//
#ifndef Template_ssqxiqb_def
#define Template_ssqxiqb_def
ETW_INLINE
ULONG
Template_ssqxiqb(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_reads_(_Arg5) const BYTE*  _Arg6
    )
{
#define ARGUMENT_COUNT_ssqxiqb 7

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxiqb];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], _Arg6, (ULONG)sizeof(char)*_Arg5);

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxiqb, EventData);
}
#endif

//
//Template from manifest : T_b0ed8c314bf0ecb6f7132adce7af650910d9bade9dd785f74954f69c4c02279c
//
#ifndef Template_ssqxi_def
#define Template_ssqxi_def
ETW_INLINE
ULONG
Template_ssqxi(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ signed __int64  _Arg4
    )
{
#define ARGUMENT_COUNT_ssqxi 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxi];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxi, EventData);
}
#endif

//
//Template from manifest : T_f9b0e501ce10e328a98633deb51ae300bda1a9142c733c762129705d836cd065
//
#ifndef Template_ssqxqb_def
#define Template_ssqxqb_def
ETW_INLINE
ULONG
Template_ssqxqb(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_reads_(_Arg4) const BYTE*  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxqb 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxqb];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], _Arg5, (ULONG)sizeof(char)*_Arg4);

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxqb, EventData);
}
#endif

//
//Template from manifest : T_dcf70147d00214d2954f7e4138c414e003003fe001bdfc057c1124f4f08b2b4d
//
#ifndef Template_ssqpxiii_def
#define Template_ssqpxiii_def
ETW_INLINE
ULONG
Template_ssqpxiii(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_opt_ const void *  _Arg3,
    _In_ unsigned __int64  _Arg4,
    _In_ signed __int64  _Arg5,
    _In_ signed __int64  _Arg6,
    _In_ signed __int64  _Arg7
    )
{
#define ARGUMENT_COUNT_ssqpxiii 8

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqpxiii];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqpxiii, EventData);
}
#endif

//
//Template from manifest : T_c5df64fd2227b66b742fa12378502a59da803c993e87aa1f175e2e68534dba47
//
#ifndef Template_ssqxiii_def
#define Template_ssqxiii_def
ETW_INLINE
ULONG
Template_ssqxiii(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ signed __int64  _Arg5,
    _In_ signed __int64  _Arg6
    )
{
#define ARGUMENT_COUNT_ssqxiii 7

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxiii];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxiii, EventData);
}
#endif

//
//Template from manifest : T_998dfa17137f14503a4d6d94ad1f7b93024c0c3ec52564471a165aa4deaa9d57
//
#ifndef Template_ssqxiiiqb_def
#define Template_ssqxiiiqb_def
ETW_INLINE
ULONG
Template_ssqxiiiqb(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ signed __int64  _Arg5,
    _In_ signed __int64  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_reads_(_Arg7) const BYTE*  _Arg8
    )
{
#define ARGUMENT_COUNT_ssqxiiiqb 9

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxiiiqb];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8], _Arg8, (ULONG)sizeof(char)*_Arg7);

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxiiiqb, EventData);
}
#endif

//
//Template from manifest : T_cb9166794e5e8c9e14f1337094f563de12c019d347183c457c940e913ac15ada
//
#ifndef Template_ssqxixqb_def
#define Template_ssqxixqb_def
ETW_INLINE
ULONG
Template_ssqxixqb(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ unsigned __int64  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_reads_(_Arg6) const BYTE*  _Arg7
    )
{
#define ARGUMENT_COUNT_ssqxixqb 8

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxixqb];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7], _Arg7, (ULONG)sizeof(char)*_Arg6);

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxixqb, EventData);
}
#endif

//
//Template from manifest : T_b942a0e5d5df6a6c111b692b642dcb0d87ad2fcd1af27777bd5172ae2a22f0cf
//
#ifndef Template_ssqxixqbqb_def
#define Template_ssqxixqbqb_def
ETW_INLINE
ULONG
Template_ssqxixqbqb(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ unsigned __int64  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_reads_(_Arg6) const BYTE*  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_reads_(_Arg8) const BYTE*  _Arg9
    )
{
#define ARGUMENT_COUNT_ssqxixqbqb 10

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxixqbqb];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7], _Arg7, (ULONG)sizeof(char)*_Arg6);

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9], _Arg9, (ULONG)sizeof(char)*_Arg8);

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxixqbqb, EventData);
}
#endif

//
//Template from manifest : T_4aa1e2e744a9902c6c7ad218013c6b6807efd100b6b46dfba2b9d1f200c4022a
//
#ifndef Template_ssqxiit_def
#define Template_ssqxiit_def
ETW_INLINE
ULONG
Template_ssqxiit(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ signed __int64  _Arg5,
    _In_ const BOOL  _Arg6
    )
{
#define ARGUMENT_COUNT_ssqxiit 7

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxiit];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxiit, EventData);
}
#endif

//
//Template from manifest : T_19848b028ec267f8fcfa92b936ca5134f5ec922320a66b0b3b8ad8fac4d531b4
//
#ifndef Template_ssqxii_def
#define Template_ssqxii_def
ETW_INLINE
ULONG
Template_ssqxii(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ signed __int64  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxii 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxii];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxii, EventData);
}
#endif

//
//Template from manifest : T_83e21ae6db007b4ac38db27b55765fef4c0081a6db9153caaa181352a8eb48c4
//
#ifndef Template_ssqxt_def
#define Template_ssqxt_def
ETW_INLINE
ULONG
Template_ssqxt(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ const BOOL  _Arg4
    )
{
#define ARGUMENT_COUNT_ssqxt 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxt];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxt, EventData);
}
#endif

//
//Template from manifest : T_c35cb3518ad6fb80f76bbe0defd68c16f079e60771c860b87a1da049226a26ba
//
#ifndef Template_ssqxti_def
#define Template_ssqxti_def
ETW_INLINE
ULONG
Template_ssqxti(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ const BOOL  _Arg4,
    _In_ signed __int64  _Arg5
    )
{
#define ARGUMENT_COUNT_ssqxti 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_ssqxti];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_ssqxti, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_Task_Exception_OpCode_Exception  0x3001000AL
#define MSG_Task_Socket_OpCode_Accept        0x3004000AL
#define MSG_Task_Socket_OpCode_Adopt         0x3004000BL
#define MSG_Task_Socket_OpCode_Bind          0x3004000CL
#define MSG_Task_Socket_OpCode_Connect       0x3004000DL
#define MSG_Task_Socket_OpCode_Event         0x3004000EL
#define MSG_Task_Socket_OpCode_Exception     0x3004000FL
#define MSG_Task_Socket_OpCode_Listen        0x30040010L
#define MSG_Task_Socket_OpCode_Option        0x30040011L
#define MSG_Task_Socket_OpCode_Orphan        0x30040012L
#define MSG_Task_Socket_OpCode_Shutdown      0x30040013L
#define MSG_Task_Timer_OpCode_Event          0x3005000AL
#define MSG_level_Error                      0x50000002L
#define MSG_level_Warning                    0x50000003L
#define MSG_level_Informational              0x50000004L
#define MSG_level_Verbose                    0x50000005L
#define MSG_Task_Exception                   0x70000001L
#define MSG_Task_MessageQueue                0x70000002L
#define MSG_Task_Settings                    0x70000003L
#define MSG_Task_Socket                      0x70000004L
#define MSG_Task_Timer                       0x70000005L
#define MSG_Provider                         0x90000001L
#define MSG_Channel_zs                       0x90000002L
#define MSG_Event_ExceptionEvent             0xB00003E8L
#define MSG_Event_MessageQueueCreate         0xB00003E9L
#define MSG_Event_MessageQueueDestroy        0xB00003EAL
#define MSG_Event_MessageQueuePost           0xB00003EBL
#define MSG_Event_MessageQueueProcess        0xB00003ECL
#define MSG_Event_MessageQueueTotalUnprocessedMessages 0xB00003EDL
#define MSG_Event_SettingApply               0xB00003EEL
#define MSG_Event_SettingApplyDefaults       0xB00003EFL
#define MSG_Event_SettingClear               0xB00003F0L
#define MSG_Event_SettingClearAll            0xB00003F1L
#define MSG_Event_SettingGetBool             0xB00003F2L
#define MSG_Event_SettingGetDouble           0xB00003F3L
#define MSG_Event_SettingGetFloat            0xB00003F4L
#define MSG_Event_SettingGetInt              0xB00003F5L
#define MSG_Event_SettingGetString           0xB00003F6L
#define MSG_Event_SettingGetUInt             0xB00003F7L
#define MSG_Event_SettingSetBool             0xB00003F8L
#define MSG_Event_SettingSetDouble           0xB00003F9L
#define MSG_Event_SettingSetFloat            0xB00003FAL
#define MSG_Event_SettingSetInt              0xB00003FBL
#define MSG_Event_SettingSetString           0xB00003FCL
#define MSG_Event_SettingSetUInt             0xB00003FDL
#define MSG_Event_SettingVerifyExists        0xB00003FEL
#define MSG_Event_SettingVerifyExistsFailed  0xB00003FFL
#define MSG_Event_SocketAccept               0xB0000400L
#define MSG_Event_SocketAdopt                0xB0000401L
#define MSG_Event_SocketBind                 0xB0000402L
#define MSG_Event_SocketClose                0xB0000403L
#define MSG_Event_SocketConnect              0xB0000404L
#define MSG_Event_SocketCreate               0xB0000405L
#define MSG_Event_SocketError                0xB0000406L
#define MSG_Event_SocketExceptionEvent       0xB0000407L
#define MSG_Event_SocketExceptionReset       0xB0000408L
#define MSG_Event_SocketGetLocalAddress      0xB0000409L
#define MSG_Event_SocketGetOptionFlag        0xB000040AL
#define MSG_Event_SocketGetOptionValue       0xB000040BL
#define MSG_Event_SocketGetOptions           0xB000040CL
#define MSG_Event_SocketGetRemoteAddress     0xB000040DL
#define MSG_Event_SocketListen               0xB000040EL
#define MSG_Event_SocketOrphan               0xB000040FL
#define MSG_Event_SocketReadReadyEvent       0xB0000410L
#define MSG_Event_SocketReadReadyReset       0xB0000411L
#define MSG_Event_SocketRecv                 0xB0000412L
#define MSG_Event_SocketRecvFrom             0xB0000413L
#define MSG_Event_SocketSend                 0xB0000414L
#define MSG_Event_SocketSendTo               0xB0000415L
#define MSG_Event_SocketSetOption            0xB0000416L
#define MSG_Event_SocketSetOptionFlag        0xB0000417L
#define MSG_Event_SocketShutdown             0xB0000418L
#define MSG_Event_SocketWouldBlock           0xB0000419L
#define MSG_Event_SocketWriteReadyEvent      0xB000041AL
#define MSG_Event_SocketWriteReadyReset      0xB000041BL
#define MSG_Event_TimerCreate                0xB000041CL
#define MSG_Event_TimerDestroy               0xB000041DL
#define MSG_Event_TimerEvent                 0xB000041EL
