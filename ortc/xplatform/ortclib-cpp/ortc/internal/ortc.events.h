// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>
#include <zsLib/eventing/Log.h>
#include <stdint.h>

namespace zsLib {
  namespace eventing {


    inline zsLib::Log::ProviderHandle &getEventHandle_OrtcLib()
    {
      static zsLib::Log::ProviderHandle gHandle {};
      return gHandle;
    }

#define ZS_INTERNAL_REGISTER_EVENTING_OrtcLib() \
    { \
      ZS_EVENTING_REGISTER_EVENT_WRITER(::zsLib::eventing::getEventHandle_OrtcLib(), "2bc80581-9143-4013-8ff6-223d3479b14e", "OrtcLib", "8225c1fba0852bb985275e9f4f1b05d306f613c38298b3736dc18be55b0c68c5"); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_dtlstransport, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_icegatherer, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_icegatherer_router, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_icetransport, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_icetransport_controller, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_mediadevices, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_mediastreamtrack, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_rtp_rtcp_packet, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_rtplistener, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_rtpmediaengine, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_rtpreceiver, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_rtpsender, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_rtptypes, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_sctp_datachannel, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_srtp, Debug); \
      ZS_EVENTING_REGISTER_SUBSYSTEM_DEFAULT_LEVEL(ortclib_webrtc, Debug); \
    }

#define ZS_INTERNAL_UNREGISTER_EVENTING_OrtcLib() ZS_EVENTING_UNREGISTER_EVENT_WRITER(::zsLib::eventing::getEventHandle_OrtcLib())


    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_CertificateCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1000, 0, 0, 4, 1, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_CertificateCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[13]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    uint64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    auto xxVal9 = (xValue7); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[9]), xxVal9); \
    int64_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    int64_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    int64_t xxVal12{(xValue10)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[12]), &(xxVal12), sizeof(xxVal12)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_CertificateCreate(), ::zsLib::eventing::getEventParameterDescriptor_CertificateCreate(), &(xxDescriptors[0]), 13); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_CertificateDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1001, 0, 0, 4, 2, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_CertificateDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_CertificateDestroy(), ::zsLib::eventing::getEventParameterDescriptor_CertificateDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_CertificateFingerprint()
    {
      static const USE_EVENT_DESCRIPTOR description {1002, 0, 0, 4, 0, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_CertificateFingerprint()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateFingerprint(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_CertificateFingerprint(), ::zsLib::eventing::getEventParameterDescriptor_CertificateFingerprint(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_CertificateGeneratedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1003, 0, 0, 4, 16, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_CertificateGeneratedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_CertificateGeneratedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal4 {(xValue2) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_CertificateGeneratedEvent(), ::zsLib::eventing::getEventParameterDescriptor_CertificateGeneratedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelBufferedAmountLowThresholdChanged()
    {
      static const USE_EVENT_DESCRIPTOR description {1004, 0, 0, 5, 16, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelBufferedAmountLowThresholdChanged()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelBufferedAmountLowThresholdChanged(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal7 {(xValue5) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelBufferedAmountLowThresholdChanged(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelBufferedAmountLowThresholdChanged(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1005, 0, 0, 4, 11, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DataChannelCancel(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelClose()
    {
      static const USE_EVENT_DESCRIPTOR description {1006, 0, 0, 5, 12, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelClose()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelClose(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelClose(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelClose(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1007, 0, 0, 4, 1, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint16_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DataChannelCreate(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelCreate(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1008, 0, 0, 4, 2, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DataChannelDestroy(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelErrorEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1009, 0, 0, 2, 19, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelErrorEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_DataChannelErrorEvent(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelErrorEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelMessage()
    {
      static const USE_EVENT_DESCRIPTOR description {1010, 0, 0, 5, 16, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelMessage()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelMessage(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[11]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint32_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    int64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    auto xxVal9 = (xValue7); \
    uint32_t xxVal10 {static_cast<uint32_t>(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal10), sizeof(xxVal10)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[10]), xxVal9, xxVal10); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelMessage(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelMessage(), &(xxDescriptors[0]), 11); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelOutgoingBufferPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1011, 0, 0, 5, 10, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelOutgoingBufferPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_SignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelOutgoingBufferPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[12]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal8 {(xValue6) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    auto xxVal10 = (xValue8); \
    uint32_t xxVal11 {static_cast<uint32_t>(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal11), sizeof(xxVal11)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[11]), xxVal10, xxVal11); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelOutgoingBufferPacket(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelOutgoingBufferPacket(), &(xxDescriptors[0]), 12); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelOutgoingBufferPacketDelivered()
    {
      static const USE_EVENT_DESCRIPTOR description {1012, 0, 0, 5, 13, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelOutgoingBufferPacketDelivered()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_SignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelOutgoingBufferPacketDelivered(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[12]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal8 {(xValue6) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    auto xxVal10 = (xValue8); \
    uint32_t xxVal11 {static_cast<uint32_t>(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal11), sizeof(xxVal11)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[11]), xxVal10, xxVal11); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelOutgoingBufferPacketDelivered(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelOutgoingBufferPacketDelivered(), &(xxDescriptors[0]), 12); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelReceivedControlAck()
    {
      static const USE_EVENT_DESCRIPTOR description {1013, 0, 0, 4, 240, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelReceivedControlAck()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelReceivedControlAck(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DataChannelReceivedControlAck(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelReceivedControlAck(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelReceivedControlOpen()
    {
      static const USE_EVENT_DESCRIPTOR description {1014, 0, 0, 4, 240, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelReceivedControlOpen()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelReceivedControlOpen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[13]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal4 {(xValue2) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint8_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint8_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint16_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint32_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint16_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    uint16_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    auto xxVal11 = (xValue9); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[11]), xxVal11); \
    auto xxVal12 = (xValue10); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[12]), xxVal12); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DataChannelReceivedControlOpen(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelReceivedControlOpen(), &(xxDescriptors[0]), 13); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSCTPTransportDeliverOutgoingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1015, 0, 0, 5, 9, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSCTPTransportDeliverOutgoingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_SignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportDeliverOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[12]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal8 {(xValue6) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    auto xxVal10 = (xValue8); \
    uint32_t xxVal11 {static_cast<uint32_t>(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal11), sizeof(xxVal11)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[11]), xxVal10, xxVal11); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSCTPTransportDeliverOutgoingPacket(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSCTPTransportDeliverOutgoingPacket(), &(xxDescriptors[0]), 12); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSCTPTransportReceivedIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1016, 0, 0, 5, 240, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSCTPTransportReceivedIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[11]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint32_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    int64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    auto xxVal9 = (xValue7); \
    uint32_t xxVal10 {static_cast<uint32_t>(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal10), sizeof(xxVal10)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[10]), xxVal9, xxVal10); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSCTPTransportReceivedIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSCTPTransportReceivedIncomingPacket(), &(xxDescriptors[0]), 11); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSCTPTransportRequestNotifyClosed()
    {
      static const USE_EVENT_DESCRIPTOR description {1017, 0, 0, 5, 18, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSCTPTransportRequestNotifyClosed()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportRequestNotifyClosed(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSCTPTransportRequestNotifyClosed(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSCTPTransportRequestNotifyClosed(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSCTPTransportRequestShutdown()
    {
      static const USE_EVENT_DESCRIPTOR description {1018, 0, 0, 5, 12, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSCTPTransportRequestShutdown()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportRequestShutdown(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSCTPTransportRequestShutdown(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSCTPTransportRequestShutdown(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSCTPTransportSendReady()
    {
      static const USE_EVENT_DESCRIPTOR description {1019, 0, 0, 5, 18, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSCTPTransportSendReady()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportSendReady(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSCTPTransportSendReady(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSCTPTransportSendReady(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSCTPTransportSendReadyFailure()
    {
      static const USE_EVENT_DESCRIPTOR description {1020, 0, 0, 2, 18, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSCTPTransportSendReadyFailure()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportSendReadyFailure(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSCTPTransportSendReadyFailure(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSCTPTransportSendReadyFailure(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSCTPTransportStateChanged()
    {
      static const USE_EVENT_DESCRIPTOR description {1021, 0, 0, 5, 18, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSCTPTransportStateChanged()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSCTPTransportStateChanged(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSCTPTransportStateChanged(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSCTPTransportStateChanged(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSendBinary()
    {
      static const USE_EVENT_DESCRIPTOR description {1022, 0, 0, 5, 9, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSendBinary()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendBinary(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    uint32_t xxVal5 {static_cast<uint32_t>(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[5]), xxVal4, xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSendBinary(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSendBinary(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSendControlAck()
    {
      static const USE_EVENT_DESCRIPTOR description {1023, 0, 0, 4, 9, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSendControlAck()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendControlAck(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint8_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DataChannelSendControlAck(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSendControlAck(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSendControlOpen()
    {
      static const USE_EVENT_DESCRIPTOR description {1024, 0, 0, 4, 9, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSendControlOpen()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendControlOpen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[12]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint8_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint8_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint32_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint16_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint16_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    auto xxVal10 = (xValue8); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[10]), xxVal10); \
    auto xxVal11 = (xValue9); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[11]), xxVal11); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DataChannelSendControlOpen(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSendControlOpen(), &(xxDescriptors[0]), 12); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelSendString()
    {
      static const USE_EVENT_DESCRIPTOR description {1025, 0, 0, 5, 9, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelSendString()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelSendString(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DataChannelSendString(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelSendString(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1026, 0, 0, 4, 19, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DataChannelStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DataChannelStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1027, 0, 0, 4, 20, 2, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DataChannelStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DataChannelStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DataChannelStep(), ::zsLib::eventing::getEventParameterDescriptor_DataChannelStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1028, 0, 0, 4, 11, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DtlsTransportCancel(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1029, 0, 0, 4, 1, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DtlsTransportCreate(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportCreate(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1030, 0, 0, 4, 2, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DtlsTransportDestroy(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportErrorEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1031, 0, 0, 2, 15, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportErrorEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_DtlsTransportErrorEvent(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportErrorEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportForwardDataPacketToIceTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1032, 0, 0, 5, 9, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportForwardDataPacketToIceTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardDataPacketToIceTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportForwardDataPacketToIceTransport(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportForwardDataPacketToIceTransport(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportForwardingEncryptedPacketToSrtpTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1033, 0, 0, 5, 13, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportForwardingEncryptedPacketToSrtpTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingEncryptedPacketToSrtpTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportForwardingEncryptedPacketToSrtpTransport(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportForwardingEncryptedPacketToSrtpTransport(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportForwardingPacketToDataTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1034, 0, 0, 5, 13, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportForwardingPacketToDataTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingPacketToDataTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportForwardingPacketToDataTransport(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportForwardingPacketToDataTransport(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportForwardingPacketToRtpListener()
    {
      static const USE_EVENT_DESCRIPTOR description {1035, 0, 0, 5, 13, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportForwardingPacketToRtpListener()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportForwardingPacketToRtpListener(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportForwardingPacketToRtpListener(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportForwardingPacketToRtpListener(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportInitialization()
    {
      static const USE_EVENT_DESCRIPTOR description {1036, 0, 0, 4, 17, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportInitialization()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitialization(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DtlsTransportInitialization(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportInitialization(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportInitializationInstallCipher()
    {
      static const USE_EVENT_DESCRIPTOR description {1037, 0, 0, 4, 17, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportInitializationInstallCipher()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitializationInstallCipher(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DtlsTransportInitializationInstallCipher(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportInitializationInstallCipher(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportInitializationInstallFingerprint()
    {
      static const USE_EVENT_DESCRIPTOR description {1038, 0, 0, 4, 17, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportInitializationInstallFingerprint()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInitializationInstallFingerprint(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DtlsTransportInitializationInstallFingerprint(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportInitializationInstallFingerprint(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportInternalIceStateChangeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1039, 0, 0, 5, 18, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportInternalIceStateChangeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalIceStateChangeEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportInternalIceStateChangeEvent(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportInternalIceStateChangeEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportInternalSrtpTransportLifetimeRemainingEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1040, 0, 0, 4, 18, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportInternalSrtpTransportLifetimeRemainingEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalSrtpTransportLifetimeRemainingEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DtlsTransportInternalSrtpTransportLifetimeRemainingEvent(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportInternalSrtpTransportLifetimeRemainingEvent(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportInternalTimerEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1041, 0, 0, 5, 18, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportInternalTimerEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportInternalTimerEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportInternalTimerEvent(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportInternalTimerEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportReceivedPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1042, 0, 0, 5, 240, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportReceivedPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportReceivedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal5 {(xValue3) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportReceivedPacket(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportReceivedPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportReceivedStunPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1043, 0, 0, 5, 240, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportReceivedStunPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportReceivedStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportReceivedStunPacket(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportReceivedStunPacket(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportRoleSet()
    {
      static const USE_EVENT_DESCRIPTOR description {1044, 0, 0, 4, 0, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportRoleSet()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportRoleSet(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DtlsTransportRoleSet(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportRoleSet(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportSendDataPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1045, 0, 0, 5, 9, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportSendDataPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    uint32_t xxVal5 {static_cast<uint32_t>(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[5]), xxVal4, xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportSendDataPacket(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportSendDataPacket(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportSendEncryptedRtpPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1046, 0, 0, 5, 9, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportSendEncryptedRtpPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendEncryptedRtpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportSendEncryptedRtpPacket(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportSendEncryptedRtpPacket(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportSendRtpPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1047, 0, 0, 5, 9, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportSendRtpPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSendRtpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_DtlsTransportSendRtpPacket(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportSendRtpPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportSrtpKeyingMaterialSetup()
    {
      static const USE_EVENT_DESCRIPTOR description {1048, 0, 0, 4, 0, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportSrtpKeyingMaterialSetup()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportSrtpKeyingMaterialSetup(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DtlsTransportSrtpKeyingMaterialSetup(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportSrtpKeyingMaterialSetup(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportStart()
    {
      static const USE_EVENT_DESCRIPTOR description {1049, 0, 0, 4, 1, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportStart()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStart(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DtlsTransportStart(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportStart(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1050, 0, 0, 4, 19, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DtlsTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1051, 0, 0, 4, 20, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_DtlsTransportStep(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_DtlsTransportStop()
    {
      static const USE_EVENT_DESCRIPTOR description {1052, 0, 0, 4, 2, 3, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_DtlsTransportStop()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_DtlsTransportStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_DtlsTransportStop(), ::zsLib::eventing::getEventParameterDescriptor_DtlsTransportStop(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererAddCandidateEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1053, 0, 0, 4, 16, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererAddCandidateEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Pointer},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererAddCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[19]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uintptr_t xxVal4 = reinterpret_cast<uintptr_t>((xValue2)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    int64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    uint32_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    uint32_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    auto xxVal12 = (xValue10); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[12]), xxVal12); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    uint16_t xxVal14{(xValue12)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[14]), &(xxVal14), sizeof(xxVal14)); \
    auto xxVal15 = (xValue13); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[15]), xxVal15); \
    auto xxVal16 = (xValue14); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[16]), xxVal16); \
    auto xxVal17 = (xValue15); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[17]), xxVal17); \
    uint16_t xxVal18{(xValue16)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[18]), &(xxVal18), sizeof(xxVal18)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererAddCandidateEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererAddCandidateEvent(), &(xxDescriptors[0]), 19); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererBufferIceTransportIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1054, 0, 0, 5, 10, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererBufferIceTransportIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererBufferIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererBufferIceTransportIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererBufferIceTransportIncomingPacket(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererBufferIceTransportIncomingStunPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1055, 0, 0, 5, 10, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererBufferIceTransportIncomingStunPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererBufferIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererBufferIceTransportIncomingStunPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererBufferIceTransportIncomingStunPacket(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1056, 0, 0, 4, 11, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererCancel(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1057, 0, 0, 4, 1, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_Boolean},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[19]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal7 {(xValue5) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal8 {(xValue6) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    uint64_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    int64_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    int64_t xxVal12{(xValue10)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[12]), &(xxVal12), sizeof(xxVal12)); \
    int64_t xxVal13{(xValue11)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[13]), &(xxVal13), sizeof(xxVal13)); \
    int64_t xxVal14{(xValue12)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[14]), &(xxVal14), sizeof(xxVal14)); \
    uint64_t xxVal15{(xValue13)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[15]), &(xxVal15), sizeof(xxVal15)); \
    uint64_t xxVal16{(xValue14)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[16]), &(xxVal16), sizeof(xxVal16)); \
    uint64_t xxVal17{(xValue15)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[17]), &(xxVal17), sizeof(xxVal17)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal18 {(xValue16) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[18]), &(xxVal18), sizeof(xxVal18)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererCreate(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererCreate(), &(xxDescriptors[0]), 19); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererCreatedAssociateGatherer()
    {
      static const USE_EVENT_DESCRIPTOR description {1058, 0, 0, 4, 21, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererCreatedAssociateGatherer()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererCreatedAssociateGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererCreatedAssociateGatherer(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererCreatedAssociateGatherer(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererDeliverIceTransportIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1059, 0, 0, 5, 13, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererDeliverIceTransportIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDeliverIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[10]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal7 {(xValue5) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    auto xxVal8 = (xValue6); \
    uint32_t xxVal9 {static_cast<uint32_t>(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal9), sizeof(xxVal9)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[9]), xxVal8, xxVal9); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererDeliverIceTransportIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererDeliverIceTransportIncomingPacket(), &(xxDescriptors[0]), 10); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererDeliverIceTransportIncomingStunPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1060, 0, 0, 5, 13, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererDeliverIceTransportIncomingStunPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDeliverIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal7 {(xValue5) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererDeliverIceTransportIncomingStunPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererDeliverIceTransportIncomingStunPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1061, 0, 0, 4, 2, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererDestroy(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererDisposeBufferedIceTransportIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1062, 0, 0, 5, 14, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererDisposeBufferedIceTransportIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDisposeBufferedIceTransportIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererDisposeBufferedIceTransportIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererDisposeBufferedIceTransportIncomingPacket(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererDisposeBufferedIceTransportIncomingStunPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1063, 0, 0, 5, 14, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererDisposeBufferedIceTransportIncomingStunPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererDisposeBufferedIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererDisposeBufferedIceTransportIncomingStunPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererDisposeBufferedIceTransportIncomingStunPacket(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererErrorEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1064, 0, 0, 2, 15, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererErrorEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererErrorEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererErrorEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererErrorIceTransportIncomingStunPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1065, 0, 0, 2, 240, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererErrorIceTransportIncomingStunPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererErrorIceTransportIncomingStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererErrorIceTransportIncomingStunPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererErrorIceTransportIncomingStunPacket(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererFilterCandidateEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1066, 0, 0, 4, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererFilterCandidateEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Pointer},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererFilterCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[19]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uintptr_t xxVal4 = reinterpret_cast<uintptr_t>((xValue2)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    int64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    uint32_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    uint32_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    auto xxVal12 = (xValue10); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[12]), xxVal12); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    uint16_t xxVal14{(xValue12)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[14]), &(xxVal14), sizeof(xxVal14)); \
    auto xxVal15 = (xValue13); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[15]), xxVal15); \
    auto xxVal16 = (xValue14); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[16]), xxVal16); \
    auto xxVal17 = (xValue15); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[17]), xxVal17); \
    uint16_t xxVal18{(xValue16)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[18]), &(xxVal18), sizeof(xxVal18)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererFilterCandidateEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererFilterCandidateEvent(), &(xxDescriptors[0]), 19); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererGather()
    {
      static const USE_EVENT_DESCRIPTOR description {1067, 0, 0, 4, 23, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererGather()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererGather(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal4 {(xValue2) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererGather(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererGather(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererHostPortBind()
    {
      static const USE_EVENT_DESCRIPTOR description {1068, 0, 0, 4, 24, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererHostPortBind()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortBind(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererHostPortBind(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererHostPortBind(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererHostPortBindFailed()
    {
      static const USE_EVENT_DESCRIPTOR description {1069, 0, 0, 2, 24, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererHostPortBindFailed()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortBindFailed(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererHostPortBindFailed(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererHostPortBindFailed(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererHostPortClose()
    {
      static const USE_EVENT_DESCRIPTOR description {1070, 0, 0, 5, 25, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererHostPortClose()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortClose(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererHostPortClose(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererHostPortClose(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererHostPortDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1071, 0, 0, 4, 2, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererHostPortDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererHostPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererHostPortDestroy(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererHostPortDestroy(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInitializeInstallInterfaceNameMapping()
    {
      static const USE_EVENT_DESCRIPTOR description {1072, 0, 0, 4, 17, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInitializeInstallInterfaceNameMapping()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInitializeInstallInterfaceNameMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererInitializeInstallInterfaceNameMapping(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInitializeInstallInterfaceNameMapping(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInitializeInstallPreference()
    {
      static const USE_EVENT_DESCRIPTOR description {1073, 0, 0, 4, 17, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInitializeInstallPreference()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInitializeInstallPreference(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    uint32_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererInitializeInstallPreference(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInitializeInstallPreference(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInstallIceTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1074, 0, 0, 4, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInstallIceTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInstallIceTransport(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererInstallIceTransport(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInstallIceTransport(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInstallQuickRoute()
    {
      static const USE_EVENT_DESCRIPTOR description {1075, 0, 0, 4, 240, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInstallQuickRoute()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Pointer},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInstallQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uintptr_t xxVal4 = reinterpret_cast<uintptr_t>((xValue2)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererInstallQuickRoute(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInstallQuickRoute(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalBackOffTimerStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1076, 0, 0, 5, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalBackOffTimerStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalBackOffTimerStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalBackOffTimerStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalBackOffTimerStateChangedEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalDnsLoookupCompleteEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1077, 0, 0, 4, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalDnsLoookupCompleteEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalDnsLoookupCompleteEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererInternalDnsLoookupCompleteEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalDnsLoookupCompleteEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalHostSocketExceptionEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1078, 0, 0, 2, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalHostSocketExceptionEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketExceptionEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalHostSocketExceptionEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalHostSocketExceptionEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalHostSocketReadReadyEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1079, 0, 0, 5, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalHostSocketReadReadyEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketReadReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalHostSocketReadReadyEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalHostSocketReadReadyEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalHostSocketWriteReadyEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1080, 0, 0, 5, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalHostSocketWriteReadyEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalHostSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalHostSocketWriteReadyEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalHostSocketWriteReadyEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalIceTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1081, 0, 0, 4, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalIceTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalIceTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererInternalIceTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalIceTransportStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalLikelyReflexiveActivityEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1082, 0, 0, 5, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalLikelyReflexiveActivityEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalLikelyReflexiveActivityEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalLikelyReflexiveActivityEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalLikelyReflexiveActivityEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalStunDiscoveryCompleteEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1083, 0, 0, 4, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalStunDiscoveryCompleteEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalStunDiscoveryCompleteEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererInternalStunDiscoveryCompleteEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalStunDiscoveryCompleteEvent(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalStunDiscoverySendPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1084, 0, 0, 5, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalStunDiscoverySendPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalStunDiscoverySendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalStunDiscoverySendPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalStunDiscoverySendPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalTcpSocketExceptionEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1085, 0, 0, 2, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalTcpSocketExceptionEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketExceptionEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalTcpSocketExceptionEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalTcpSocketExceptionEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalTcpSocketReadReadyEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1086, 0, 0, 5, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalTcpSocketReadReadyEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketReadReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalTcpSocketReadReadyEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalTcpSocketReadReadyEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalTcpSocketWriteReadyEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1087, 0, 0, 5, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalTcpSocketWriteReadyEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTcpSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalTcpSocketWriteReadyEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalTcpSocketWriteReadyEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalTimerEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1088, 0, 0, 5, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalTimerEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalTimerEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalTimerEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalTurnSocketStateChangeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1089, 0, 0, 4, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalTurnSocketStateChangeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalTurnSocketStateChangeEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererInternalTurnSocketStateChangeEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalTurnSocketStateChangeEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererInternalWakeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1090, 0, 0, 5, 18, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererInternalWakeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererInternalWakeEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererInternalWakeEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererPendingResolveHostIP()
    {
      static const USE_EVENT_DESCRIPTOR description {1091, 0, 0, 5, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererPendingResolveHostIP()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererPendingResolveHostIP(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererPendingResolveHostIP(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererPendingResolveHostIP(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererReflexivePortCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1092, 0, 0, 4, 1, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererReflexivePortCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererReflexivePortCreate(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererReflexivePortCreate(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererReflexivePortDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1093, 0, 0, 4, 2, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererReflexivePortDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererReflexivePortDestroy(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererReflexivePortDestroy(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererReflexivePortFoundMapped()
    {
      static const USE_EVENT_DESCRIPTOR description {1094, 0, 0, 4, 22, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererReflexivePortFoundMapped()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererReflexivePortFoundMapped(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererReflexivePortFoundMapped(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererReflexivePortFoundMapped(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRelayPortCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1095, 0, 0, 4, 22, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRelayPortCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererRelayPortCreate(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRelayPortCreate(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRelayPortDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1096, 0, 0, 4, 2, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRelayPortDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererRelayPortDestroy(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRelayPortDestroy(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRelayPortFoundIP()
    {
      static const USE_EVENT_DESCRIPTOR description {1097, 0, 0, 4, 11, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRelayPortFoundIP()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRelayPortFoundIP(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererRelayPortFoundIP(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRelayPortFoundIP(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRemoveCandidateEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1098, 0, 0, 4, 16, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRemoveCandidateEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Pointer},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[19]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uintptr_t xxVal4 = reinterpret_cast<uintptr_t>((xValue2)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    int64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    uint32_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    uint32_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    auto xxVal12 = (xValue10); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[12]), xxVal12); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    uint16_t xxVal14{(xValue12)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[14]), &(xxVal14), sizeof(xxVal14)); \
    auto xxVal15 = (xValue13); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[15]), xxVal15); \
    auto xxVal16 = (xValue14); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[16]), xxVal16); \
    auto xxVal17 = (xValue15); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[17]), xxVal17); \
    uint16_t xxVal18{(xValue16)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[18]), &(xxVal18), sizeof(xxVal18)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererRemoveCandidateEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRemoveCandidateEvent(), &(xxDescriptors[0]), 19); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRemoveIceTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1099, 0, 0, 4, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRemoveIceTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveIceTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererRemoveIceTransport(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRemoveIceTransport(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRemoveQuickRoute()
    {
      static const USE_EVENT_DESCRIPTOR description {1100, 0, 0, 4, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRemoveQuickRoute()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Pointer},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemoveQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uintptr_t xxVal4 = reinterpret_cast<uintptr_t>((xValue2)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererRemoveQuickRoute(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRemoveQuickRoute(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRemovetAllIceTransportRelatedRoutes()
    {
      static const USE_EVENT_DESCRIPTOR description {1101, 0, 0, 4, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRemovetAllIceTransportRelatedRoutes()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRemovetAllIceTransportRelatedRoutes(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererRemovetAllIceTransportRelatedRoutes(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRemovetAllIceTransportRelatedRoutes(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererResolveFoundHostIP()
    {
      static const USE_EVENT_DESCRIPTOR description {1102, 0, 0, 5, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererResolveFoundHostIP()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererResolveFoundHostIP(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    uint64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererResolveFoundHostIP(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererResolveFoundHostIP(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererResolveHostIP()
    {
      static const USE_EVENT_DESCRIPTOR description {1103, 0, 0, 4, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererResolveHostIP()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererResolveHostIP(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererResolveHostIP(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererResolveHostIP(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRouteTrace()
    {
      static const USE_EVENT_DESCRIPTOR description {1104, 0, 0, 5, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRouteTrace()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[23]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint16_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    uint16_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    uint64_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    auto xxVal12 = (xValue10); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[12]), xxVal12); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    uint32_t xxVal14{(xValue12)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[14]), &(xxVal14), sizeof(xxVal14)); \
    uint32_t xxVal15{(xValue13)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[15]), &(xxVal15), sizeof(xxVal15)); \
    auto xxVal16 = (xValue14); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[16]), xxVal16); \
    auto xxVal17 = (xValue15); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[17]), xxVal17); \
    uint16_t xxVal18{(xValue16)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[18]), &(xxVal18), sizeof(xxVal18)); \
    auto xxVal19 = (xValue17); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[19]), xxVal19); \
    auto xxVal20 = (xValue18); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[20]), xxVal20); \
    auto xxVal21 = (xValue19); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[21]), xxVal21); \
    uint16_t xxVal22{(xValue20)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[22]), &(xxVal22), sizeof(xxVal22)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererRouteTrace(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRouteTrace(), &(xxDescriptors[0]), 23); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRouterCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1105, 0, 0, 5, 11, 5, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRouterCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererRouterCancel(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRouterCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRouterCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1106, 0, 0, 4, 1, 5, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRouterCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererRouterCreate(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRouterCreate(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRouterDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1107, 0, 0, 4, 2, 5, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRouterDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceGathererRouterDestroy(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRouterDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRouterInternalEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1108, 0, 0, 5, 18, 5, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRouterInternalEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterInternalEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    uint16_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererRouterInternalEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRouterInternalEvent(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererRouterRouteTrace()
    {
      static const USE_EVENT_DESCRIPTOR description {1109, 0, 0, 5, 0, 5, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererRouterRouteTrace()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererRouterRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[18]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    uint32_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint32_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    auto xxVal10 = (xValue8); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[10]), xxVal10); \
    auto xxVal11 = (xValue9); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[11]), xxVal11); \
    uint16_t xxVal12{(xValue10)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[12]), &(xxVal12), sizeof(xxVal12)); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    auto xxVal14 = (xValue12); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[14]), xxVal14); \
    auto xxVal15 = (xValue13); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[15]), xxVal15); \
    uint16_t xxVal16{(xValue14)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[16]), &(xxVal16), sizeof(xxVal16)); \
    auto xxVal17 = (xValue15); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[17]), xxVal17); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererRouterRouteTrace(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererRouterRouteTrace(), &(xxDescriptors[0]), 18); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererSearchQuickRoute()
    {
      static const USE_EVENT_DESCRIPTOR description {1110, 0, 0, 5, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererSearchQuickRoute()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Pointer},
        {EventParameterType_AString},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSearchQuickRoute(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uintptr_t xxVal4 = reinterpret_cast<uintptr_t>((xValue2)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererSearchQuickRoute(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererSearchQuickRoute(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererSendIceTransportPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1111, 0, 0, 5, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererSendIceTransportPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererSendIceTransportPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererSendIceTransportPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererSendIceTransportPacketFailed()
    {
      static const USE_EVENT_DESCRIPTOR description {1112, 0, 0, 3, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererSendIceTransportPacketFailed()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketFailed(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Warning, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererSendIceTransportPacketFailed(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererSendIceTransportPacketFailed(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererSendIceTransportPacketViaTcp()
    {
      static const USE_EVENT_DESCRIPTOR description {1113, 0, 0, 5, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererSendIceTransportPacketViaTcp()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaTcp(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererSendIceTransportPacketViaTcp(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererSendIceTransportPacketViaTcp(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererSendIceTransportPacketViaTurn()
    {
      static const USE_EVENT_DESCRIPTOR description {1114, 0, 0, 5, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererSendIceTransportPacketViaTurn()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaTurn(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererSendIceTransportPacketViaTurn(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererSendIceTransportPacketViaTurn(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererSendIceTransportPacketViaUdp()
    {
      static const USE_EVENT_DESCRIPTOR description {1115, 0, 0, 5, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererSendIceTransportPacketViaUdp()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererSendIceTransportPacketViaUdp(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[10]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    auto xxVal8 = (xValue6); \
    uint32_t xxVal9 {static_cast<uint32_t>(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal9), sizeof(xxVal9)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[9]), xxVal8, xxVal9); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererSendIceTransportPacketViaUdp(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererSendIceTransportPacketViaUdp(), &(xxDescriptors[0]), 10); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1116, 0, 0, 4, 19, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1117, 0, 0, 4, 20, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererStep(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererTcpPortCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1118, 0, 0, 5, 1, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererTcpPortCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpPortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererTcpPortCreate(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererTcpPortCreate(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererTcpPortDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1119, 0, 0, 4, 2, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererTcpPortDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpPortDestroy(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceGathererTcpPortDestroy(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererTcpPortDestroy(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererTcpSocketPacketReceivedFrom()
    {
      static const USE_EVENT_DESCRIPTOR description {1120, 0, 0, 5, 240, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererTcpSocketPacketReceivedFrom()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpSocketPacketReceivedFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererTcpSocketPacketReceivedFrom(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererTcpSocketPacketReceivedFrom(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererTcpSocketSentOutgoing()
    {
      static const USE_EVENT_DESCRIPTOR description {1121, 0, 0, 5, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererTcpSocketSentOutgoing()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTcpSocketSentOutgoing(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererTcpSocketSentOutgoing(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererTcpSocketSentOutgoing(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererTurnSocketReceivedPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1122, 0, 0, 5, 240, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererTurnSocketReceivedPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTurnSocketReceivedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererTurnSocketReceivedPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererTurnSocketReceivedPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererTurnSocketSendPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1123, 0, 0, 5, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererTurnSocketSendPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererTurnSocketSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererTurnSocketSendPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererTurnSocketSendPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererUdpSocketPacketForwardingToTurnSocket()
    {
      static const USE_EVENT_DESCRIPTOR description {1124, 0, 0, 5, 13, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererUdpSocketPacketForwardingToTurnSocket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketForwardingToTurnSocket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal5 {(xValue3) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererUdpSocketPacketForwardingToTurnSocket(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererUdpSocketPacketForwardingToTurnSocket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererUdpSocketPacketReceivedFrom()
    {
      static const USE_EVENT_DESCRIPTOR description {1125, 0, 0, 5, 240, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererUdpSocketPacketReceivedFrom()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketReceivedFrom(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererUdpSocketPacketReceivedFrom(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererUdpSocketPacketReceivedFrom(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceGathererUdpSocketPacketSentTo()
    {
      static const USE_EVENT_DESCRIPTOR description {1126, 0, 0, 5, 9, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceGathererUdpSocketPacketSentTo()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceGathererUdpSocketPacketSentTo(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceGathererUdpSocketPacketSentTo(), ::zsLib::eventing::getEventParameterDescriptor_IceGathererUdpSocketPacketSentTo(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportAddRemoteCandidate()
    {
      static const USE_EVENT_DESCRIPTOR description {1127, 0, 0, 4, 21, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportAddRemoteCandidate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportAddRemoteCandidate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[18]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint32_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint32_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    auto xxVal10 = (xValue8); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[10]), xxVal10); \
    auto xxVal11 = (xValue9); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[11]), xxVal11); \
    uint16_t xxVal12{(xValue10)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[12]), &(xxVal12), sizeof(xxVal12)); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    auto xxVal14 = (xValue12); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[14]), xxVal14); \
    auto xxVal15 = (xValue13); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[15]), xxVal15); \
    uint16_t xxVal16{(xValue14)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[16]), &(xxVal16), sizeof(xxVal16)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal17 {(xValue15) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[17]), &(xxVal17), sizeof(xxVal17)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportAddRemoteCandidate(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportAddRemoteCandidate(), &(xxDescriptors[0]), 18); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportAddRemoteCandidateComplete()
    {
      static const USE_EVENT_DESCRIPTOR description {1128, 0, 0, 4, 21, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportAddRemoteCandidateComplete()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportAddRemoteCandidateComplete(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportAddRemoteCandidateComplete(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportAddRemoteCandidateComplete(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportBufferingIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1129, 0, 0, 5, 10, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportBufferingIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportBufferingIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportBufferingIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportBufferingIncomingPacket(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1130, 0, 0, 4, 11, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportCancel(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportCandidatePairChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1131, 0, 0, 4, 16, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportCandidatePairChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCandidatePairChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportCandidatePairChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportCandidatePairChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1132, 0, 0, 4, 11, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportControllerCancel(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1133, 0, 0, 4, 1, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportControllerCreate(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerCreate(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1134, 0, 0, 4, 2, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportControllerDestroy(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerInternalTransportAttachedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1135, 0, 0, 4, 18, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerInternalTransportAttachedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalTransportAttachedEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportControllerInternalTransportAttachedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerInternalTransportAttachedEvent(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerInternalTransportDetachedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1136, 0, 0, 4, 18, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerInternalTransportDetachedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalTransportDetachedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportControllerInternalTransportDetachedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerInternalTransportDetachedEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerInternalWakeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1137, 0, 0, 4, 0, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerInternalWakeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportControllerInternalWakeEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerInternalWakeEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerNoNeedToWaitUntilUnfrozen()
    {
      static const USE_EVENT_DESCRIPTOR description {1138, 0, 0, 4, 0, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerNoNeedToWaitUntilUnfrozen()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerNoNeedToWaitUntilUnfrozen(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportControllerNoNeedToWaitUntilUnfrozen(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerNoNeedToWaitUntilUnfrozen(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1139, 0, 0, 4, 20, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportControllerStep(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportControllerWaitUntilUnfrozen()
    {
      static const USE_EVENT_DESCRIPTOR description {1140, 0, 0, 4, 0, 7, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportControllerWaitUntilUnfrozen()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportControllerWaitUntilUnfrozen(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportControllerWaitUntilUnfrozen(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportControllerWaitUntilUnfrozen(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1141, 0, 0, 4, 1, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_Boolean},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[14]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal8 {(xValue6) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal9 {(xValue7) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    int64_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    int64_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    uint64_t xxVal12{(xValue10)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[12]), &(xxVal12), sizeof(xxVal12)); \
    uint64_t xxVal13{(xValue11)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[13]), &(xxVal13), sizeof(xxVal13)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportCreate(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportCreate(), &(xxDescriptors[0]), 14); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportCreateAssociatedTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1142, 0, 0, 4, 22, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportCreateAssociatedTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportCreateAssociatedTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportCreateAssociatedTransport(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportCreateAssociatedTransport(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportDeliveringBufferedIncomingPacketToSecureTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1143, 0, 0, 5, 13, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportDeliveringBufferedIncomingPacketToSecureTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringBufferedIncomingPacketToSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportDeliveringBufferedIncomingPacketToSecureTransport(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportDeliveringBufferedIncomingPacketToSecureTransport(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportDeliveringIncomingPacketToSecureTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1144, 0, 0, 5, 13, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportDeliveringIncomingPacketToSecureTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringIncomingPacketToSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportDeliveringIncomingPacketToSecureTransport(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportDeliveringIncomingPacketToSecureTransport(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportDeliveringIncomingStunPacketToSecureTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1145, 0, 0, 5, 13, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportDeliveringIncomingStunPacketToSecureTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDeliveringIncomingStunPacketToSecureTransport(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportDeliveringIncomingStunPacketToSecureTransport(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportDeliveringIncomingStunPacketToSecureTransport(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1146, 0, 0, 4, 2, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportDestroy(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportDisposingBufferedIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1147, 0, 0, 4, 14, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportDisposingBufferedIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportDisposingBufferedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportDisposingBufferedIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportDisposingBufferedIncomingPacket(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportErrorEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1148, 0, 0, 2, 15, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportErrorEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportErrorEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportErrorEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportForwardSecureTransportPacketToGatherer()
    {
      static const USE_EVENT_DESCRIPTOR description {1149, 0, 0, 5, 9, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportForwardSecureTransportPacketToGatherer()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportForwardSecureTransportPacketToGatherer(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportForwardSecureTransportPacketToGatherer(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportForwardSecureTransportPacketToGatherer(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInstallFoundation()
    {
      static const USE_EVENT_DESCRIPTOR description {1150, 0, 0, 4, 0, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInstallFoundation()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInstallFoundation(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportInstallFoundation(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInstallFoundation(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInstallFoundationDependencyFreezePromise()
    {
      static const USE_EVENT_DESCRIPTOR description {1151, 0, 0, 4, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInstallFoundationDependencyFreezePromise()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInstallFoundationDependencyFreezePromise(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInstallFoundationDependencyFreezePromise(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInstallFoundationDependencyFreezePromise(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalControllerAttachedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1152, 0, 0, 4, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalControllerAttachedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalControllerAttachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInternalControllerAttachedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalControllerAttachedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalControllerDetachedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1153, 0, 0, 4, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalControllerDetachedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalControllerDetachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInternalControllerDetachedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalControllerDetachedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalDeliveryPendingPacketsEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1154, 0, 0, 4, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalDeliveryPendingPacketsEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalDeliveryPendingPacketsEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportInternalDeliveryPendingPacketsEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalDeliveryPendingPacketsEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalGathererAddLocalCandidateCompleteEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1155, 0, 0, 4, 21, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalGathererAddLocalCandidateCompleteEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererAddLocalCandidateCompleteEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInternalGathererAddLocalCandidateCompleteEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalGathererAddLocalCandidateCompleteEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalGathererAddLocalCandidateEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1156, 0, 0, 4, 21, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalGathererAddLocalCandidateEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererAddLocalCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[16]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    uint32_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint32_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    auto xxVal9 = (xValue7); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[9]), xxVal9); \
    auto xxVal10 = (xValue8); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[10]), xxVal10); \
    uint16_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    auto xxVal12 = (xValue10); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[12]), xxVal12); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    auto xxVal14 = (xValue12); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[14]), xxVal14); \
    uint16_t xxVal15{(xValue13)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[15]), &(xxVal15), sizeof(xxVal15)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInternalGathererAddLocalCandidateEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalGathererAddLocalCandidateEvent(), &(xxDescriptors[0]), 16); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalGathererRemoveLocalCandidateEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1157, 0, 0, 4, 23, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalGathererRemoveLocalCandidateEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererRemoveLocalCandidateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[16]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    uint32_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint32_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    auto xxVal9 = (xValue7); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[9]), xxVal9); \
    auto xxVal10 = (xValue8); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[10]), xxVal10); \
    uint16_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    auto xxVal12 = (xValue10); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[12]), xxVal12); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    auto xxVal14 = (xValue12); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[14]), xxVal14); \
    uint16_t xxVal15{(xValue13)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[15]), &(xxVal15), sizeof(xxVal15)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInternalGathererRemoveLocalCandidateEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalGathererRemoveLocalCandidateEvent(), &(xxDescriptors[0]), 16); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalGathererStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1158, 0, 0, 4, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalGathererStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalGathererStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInternalGathererStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalGathererStateChangedEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalRoleConflictDetectedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1159, 0, 0, 3, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalRoleConflictDetectedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalRoleConflictDetectedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Warning, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportInternalRoleConflictDetectedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalRoleConflictDetectedEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalSecureTransportAttachedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1160, 0, 0, 4, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalSecureTransportAttachedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalSecureTransportAttachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInternalSecureTransportAttachedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalSecureTransportAttachedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalSecureTransportDetachedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1161, 0, 0, 4, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalSecureTransportDetachedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalSecureTransportDetachedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportInternalSecureTransportDetachedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalSecureTransportDetachedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalStunRequesterCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1162, 0, 0, 4, 0, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalStunRequesterCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterCreate(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportInternalStunRequesterCreate(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalStunRequesterCreate(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalStunRequesterReceivedResponse()
    {
      static const USE_EVENT_DESCRIPTOR description {1163, 0, 0, 5, 240, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalStunRequesterReceivedResponse()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterReceivedResponse(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportInternalStunRequesterReceivedResponse(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalStunRequesterReceivedResponse(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalStunRequesterReceivedResponseMismatch()
    {
      static const USE_EVENT_DESCRIPTOR description {1164, 0, 0, 3, 240, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalStunRequesterReceivedResponseMismatch()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterReceivedResponseMismatch(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Warning, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportInternalStunRequesterReceivedResponseMismatch(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalStunRequesterReceivedResponseMismatch(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalStunRequesterSendPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1165, 0, 0, 5, 9, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalStunRequesterSendPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportInternalStunRequesterSendPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalStunRequesterSendPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalStunRequesterTimedOut()
    {
      static const USE_EVENT_DESCRIPTOR description {1166, 0, 0, 5, 240, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalStunRequesterTimedOut()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalStunRequesterTimedOut(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportInternalStunRequesterTimedOut(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalStunRequesterTimedOut(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalTimerEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1167, 0, 0, 5, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalTimerEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportInternalTimerEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalTimerEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalUnfrozenPromiseEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1168, 0, 0, 5, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalUnfrozenPromiseEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalUnfrozenPromiseEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportInternalUnfrozenPromiseEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalUnfrozenPromiseEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportInternalWakeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1169, 0, 0, 5, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportInternalWakeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportInternalWakeEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportInternalWakeEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportKeepWarm()
    {
      static const USE_EVENT_DESCRIPTOR description {1170, 0, 0, 4, 25, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportKeepWarm()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportKeepWarm(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportKeepWarm(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportKeepWarm(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportReceivedPacketFromGatherer()
    {
      static const USE_EVENT_DESCRIPTOR description {1171, 0, 0, 5, 240, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportReceivedPacketFromGatherer()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportReceivedPacketFromGatherer(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportReceivedPacketFromGatherer(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportReceivedPacketFromGatherer(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportReceivedStunPacketFromGatherer()
    {
      static const USE_EVENT_DESCRIPTOR description {1172, 0, 0, 5, 240, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportReceivedStunPacketFromGatherer()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportReceivedStunPacketFromGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportReceivedStunPacketFromGatherer(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportReceivedStunPacketFromGatherer(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportRemoveFoundation()
    {
      static const USE_EVENT_DESCRIPTOR description {1173, 0, 0, 4, 0, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportRemoveFoundation()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveFoundation(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportRemoveFoundation(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportRemoveFoundation(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportRemoveRemoteCandidate()
    {
      static const USE_EVENT_DESCRIPTOR description {1174, 0, 0, 4, 23, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportRemoveRemoteCandidate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveRemoteCandidate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[18]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint32_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint32_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    auto xxVal10 = (xValue8); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[10]), xxVal10); \
    auto xxVal11 = (xValue9); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[11]), xxVal11); \
    uint16_t xxVal12{(xValue10)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[12]), &(xxVal12), sizeof(xxVal12)); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    auto xxVal14 = (xValue12); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[14]), xxVal14); \
    auto xxVal15 = (xValue13); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[15]), xxVal15); \
    uint16_t xxVal16{(xValue14)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[16]), &(xxVal16), sizeof(xxVal16)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal17 {(xValue15) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[17]), &(xxVal17), sizeof(xxVal17)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportRemoveRemoteCandidate(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportRemoveRemoteCandidate(), &(xxDescriptors[0]), 18); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportRemoveRemoteCandidateComplete()
    {
      static const USE_EVENT_DESCRIPTOR description {1175, 0, 0, 4, 23, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportRemoveRemoteCandidateComplete()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRemoveRemoteCandidateComplete(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportRemoveRemoteCandidateComplete(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportRemoveRemoteCandidateComplete(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportRetryReceivedStunPacketFromGatherer()
    {
      static const USE_EVENT_DESCRIPTOR description {1176, 0, 0, 5, 240, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportRetryReceivedStunPacketFromGatherer()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRetryReceivedStunPacketFromGatherer(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportRetryReceivedStunPacketFromGatherer(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportRetryReceivedStunPacketFromGatherer(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportRouteStateTrackerStateCountChange()
    {
      static const USE_EVENT_DESCRIPTOR description {1177, 0, 0, 5, 0, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportRouteStateTrackerStateCountChange()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRouteStateTrackerStateCountChange(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportRouteStateTrackerStateCountChange(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportRouteStateTrackerStateCountChange(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportRouteTrace()
    {
      static const USE_EVENT_DESCRIPTOR description {1178, 0, 0, 5, 0, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportRouteTrace()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportRouteTrace(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32, xValue33, xValue34, xValue35, xValue36, xValue37, xValue38, xValue39, xValue40, xValue41) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[44]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    auto xxVal9 = (xValue7); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[9]), xxVal9); \
    uint32_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    uint32_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    auto xxVal12 = (xValue10); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[12]), xxVal12); \
    auto xxVal13 = (xValue11); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[13]), xxVal13); \
    uint16_t xxVal14{(xValue12)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[14]), &(xxVal14), sizeof(xxVal14)); \
    auto xxVal15 = (xValue13); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[15]), xxVal15); \
    auto xxVal16 = (xValue14); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[16]), xxVal16); \
    auto xxVal17 = (xValue15); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[17]), xxVal17); \
    uint16_t xxVal18{(xValue16)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[18]), &(xxVal18), sizeof(xxVal18)); \
    auto xxVal19 = (xValue17); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[19]), xxVal19); \
    auto xxVal20 = (xValue18); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[20]), xxVal20); \
    uint32_t xxVal21{(xValue19)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[21]), &(xxVal21), sizeof(xxVal21)); \
    uint32_t xxVal22{(xValue20)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[22]), &(xxVal22), sizeof(xxVal22)); \
    auto xxVal23 = (xValue21); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[23]), xxVal23); \
    auto xxVal24 = (xValue22); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[24]), xxVal24); \
    uint16_t xxVal25{(xValue23)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[25]), &(xxVal25), sizeof(xxVal25)); \
    auto xxVal26 = (xValue24); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[26]), xxVal26); \
    auto xxVal27 = (xValue25); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[27]), xxVal27); \
    auto xxVal28 = (xValue26); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[28]), xxVal28); \
    uint16_t xxVal29{(xValue27)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[29]), &(xxVal29), sizeof(xxVal29)); \
    uint64_t xxVal30{(xValue28)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[30]), &(xxVal30), sizeof(xxVal30)); \
    uint64_t xxVal31{(xValue29)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[31]), &(xxVal31), sizeof(xxVal31)); \
    int64_t xxVal32{(xValue30)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[32]), &(xxVal32), sizeof(xxVal32)); \
    int64_t xxVal33{(xValue31)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[33]), &(xxVal33), sizeof(xxVal33)); \
    int64_t xxVal34{(xValue32)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[34]), &(xxVal34), sizeof(xxVal34)); \
    int64_t xxVal35{(xValue33)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[35]), &(xxVal35), sizeof(xxVal35)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal36 {(xValue34) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[36]), &(xxVal36), sizeof(xxVal36)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal37 {(xValue35) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[37]), &(xxVal37), sizeof(xxVal37)); \
    uint64_t xxVal38{(xValue36)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[38]), &(xxVal38), sizeof(xxVal38)); \
    uint64_t xxVal39{(xValue37)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[39]), &(xxVal39), sizeof(xxVal39)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal40 {(xValue38) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[40]), &(xxVal40), sizeof(xxVal40)); \
    uint64_t xxVal41{(xValue39)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[41]), &(xxVal41), sizeof(xxVal41)); \
    int64_t xxVal42{(xValue40)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[42]), &(xxVal42), sizeof(xxVal42)); \
    int64_t xxVal43{(xValue41)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[43]), &(xxVal43), sizeof(xxVal43)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportRouteTrace(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportRouteTrace(), &(xxDescriptors[0]), 44); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportSecureTransportSendPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1179, 0, 0, 5, 9, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportSecureTransportSendPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportSecureTransportSendPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    uint32_t xxVal5 {static_cast<uint32_t>(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[5]), xxVal4, xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportSecureTransportSendPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportSecureTransportSendPacket(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportSendStunPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1180, 0, 0, 5, 9, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportSendStunPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportSendStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_IceTransportSendStunPacket(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportSendStunPacket(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportStart()
    {
      static const USE_EVENT_DESCRIPTOR description {1181, 0, 0, 4, 1, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportStart()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_Boolean},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStart(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[12]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal5 {(xValue3) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal8 {(xValue6) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    auto xxVal9 = (xValue7); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[9]), xxVal9); \
    auto xxVal10 = (xValue8); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[10]), xxVal10); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal11 {(xValue9) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_IceTransportStart(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportStart(), &(xxDescriptors[0]), 12); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1182, 0, 0, 4, 19, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_IceTransportStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1183, 0, 0, 4, 20, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_IceTransportStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_IceTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_IceTransportStep(), ::zsLib::eventing::getEventParameterDescriptor_IceTransportStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_OrtcCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1184, 0, 0, 4, 1, 8, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_OrtcCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcCreate(xSubsystem) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[3]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_OrtcCreate(), ::zsLib::eventing::getEventParameterDescriptor_OrtcCreate(), &(xxDescriptors[0]), 3); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_OrtcDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1185, 0, 0, 4, 2, 8, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_OrtcDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcDestroy(xSubsystem) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[3]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_OrtcDestroy(), ::zsLib::eventing::getEventParameterDescriptor_OrtcDestroy(), &(xxDescriptors[0]), 3); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_OrtcIceGathererHostPortCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1186, 0, 0, 5, 0, 4, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_OrtcIceGathererHostPortCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcIceGathererHostPortCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_OrtcIceGathererHostPortCreate(), ::zsLib::eventing::getEventParameterDescriptor_OrtcIceGathererHostPortCreate(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_OrtcIceTransportInternalWarmRoutesChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1187, 0, 0, 4, 18, 6, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_OrtcIceTransportInternalWarmRoutesChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcIceTransportInternalWarmRoutesChangedEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_OrtcIceTransportInternalWarmRoutesChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_OrtcIceTransportInternalWarmRoutesChangedEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_OrtcSrtpTransportInstallKeyingMaterial()
    {
      static const USE_EVENT_DESCRIPTOR description {1188, 0, 0, 4, 17, 18, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_OrtcSrtpTransportInstallKeyingMaterial()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcSrtpTransportInstallKeyingMaterial(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[10]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    uint16_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_OrtcSrtpTransportInstallKeyingMaterial(), ::zsLib::eventing::getEventParameterDescriptor_OrtcSrtpTransportInstallKeyingMaterial(), &(xxDescriptors[0]), 10); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerBufferIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1189, 0, 0, 4, 10, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerBufferIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerBufferIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerBufferIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerBufferIncomingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1190, 0, 0, 4, 11, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerCancel(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1191, 0, 0, 4, 1, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[11]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    int64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    int64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    int64_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpListenerCreate(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerCreate(), &(xxDescriptors[0]), 11); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1192, 0, 0, 4, 2, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpListenerDestroy(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerDisposeBufferedIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1193, 0, 0, 4, 14, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerDisposeBufferedIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerDisposeBufferedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerDisposeBufferedIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerDisposeBufferedIncomingPacket(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerErrorEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1194, 0, 0, 2, 15, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerErrorEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerErrorEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerErrorEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerFindMapping()
    {
      static const USE_EVENT_DESCRIPTOR description {1195, 0, 0, 5, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerFindMapping()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFindMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerFindMapping(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerFindMapping(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerForwardIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1196, 0, 0, 5, 13, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerForwardIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerForwardIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerForwardIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerForwardIncomingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerFoundMappingByMuxID()
    {
      static const USE_EVENT_DESCRIPTOR description {1197, 0, 0, 5, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerFoundMappingByMuxID()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingByMuxID(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerFoundMappingByMuxID(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerFoundMappingByMuxID(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerFoundMappingByPayloadType()
    {
      static const USE_EVENT_DESCRIPTOR description {1198, 0, 0, 5, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerFoundMappingByPayloadType()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingByPayloadType(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint8_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerFoundMappingByPayloadType(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerFoundMappingByPayloadType(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerFoundMappingBySsrc()
    {
      static const USE_EVENT_DESCRIPTOR description {1199, 0, 0, 5, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerFoundMappingBySsrc()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerFoundMappingBySsrc(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint32_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerFoundMappingBySsrc(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerFoundMappingBySsrc(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerInternalTimerEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1200, 0, 0, 5, 18, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerInternalTimerEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerInternalTimerEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerInternalTimerEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerInternalTimerEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerInternalWakeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1201, 0, 0, 4, 18, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerInternalWakeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerInternalWakeEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerInternalWakeEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerReceivedIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1202, 0, 0, 5, 240, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerReceivedIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerReceivedIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerReceivedIncomingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerRegisterHeaderExtension()
    {
      static const USE_EVENT_DESCRIPTOR description {1203, 0, 0, 4, 17, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerRegisterHeaderExtension()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerRegisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal7 {(xValue5) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerRegisterHeaderExtension(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerRegisterHeaderExtension(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerRegisterReceiver()
    {
      static const USE_EVENT_DESCRIPTOR description {1204, 0, 0, 4, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerRegisterReceiver()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerRegisterReceiver(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerRegisterReceiver(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerRegisterReceiver(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerSsrcTableEntryAdded()
    {
      static const USE_EVENT_DESCRIPTOR description {1205, 0, 0, 5, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerSsrcTableEntryAdded()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryAdded(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint32_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerSsrcTableEntryAdded(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerSsrcTableEntryAdded(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerSsrcTableEntryRemoved()
    {
      static const USE_EVENT_DESCRIPTOR description {1206, 0, 0, 4, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerSsrcTableEntryRemoved()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryRemoved(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint32_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerSsrcTableEntryRemoved(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerSsrcTableEntryRemoved(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerSsrcTableEntryUpdated()
    {
      static const USE_EVENT_DESCRIPTOR description {1207, 0, 0, 5, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerSsrcTableEntryUpdated()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerSsrcTableEntryUpdated(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint32_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[7]), xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpListenerSsrcTableEntryUpdated(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerSsrcTableEntryUpdated(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1208, 0, 0, 4, 20, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1209, 0, 0, 4, 20, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerStep(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerUnhandledEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1210, 0, 0, 4, 16, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerUnhandledEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnhandledEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint32_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint8_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerUnhandledEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerUnhandledEvent(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerUnregisterHeaderExtension()
    {
      static const USE_EVENT_DESCRIPTOR description {1211, 0, 0, 4, 17, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerUnregisterHeaderExtension()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal7 {(xValue5) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerUnregisterHeaderExtension(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerUnregisterHeaderExtension(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerUnregisterReceiver()
    {
      static const USE_EVENT_DESCRIPTOR description {1212, 0, 0, 4, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerUnregisterReceiver()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterReceiver(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerUnregisterReceiver(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerUnregisterReceiver(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpListenerUnregisterSender()
    {
      static const USE_EVENT_DESCRIPTOR description {1213, 0, 0, 4, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpListenerUnregisterSender()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpListenerUnregisterSender(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpListenerUnregisterSender(), ::zsLib::eventing::getEventParameterDescriptor_RtpListenerUnregisterSender(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpMediaEngineCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1214, 0, 0, 4, 1, 10, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpMediaEngineCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpMediaEngineCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpMediaEngineCreate(), ::zsLib::eventing::getEventParameterDescriptor_RtpMediaEngineCreate(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpMediaEngineDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1215, 0, 0, 4, 2, 10, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpMediaEngineDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpMediaEngineDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpMediaEngineDestroy(), ::zsLib::eventing::getEventParameterDescriptor_RtpMediaEngineDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceivedIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1216, 0, 0, 5, 240, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceivedIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceivedIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceivedIncomingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverAddChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1217, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverAddChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverAddChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverAddChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverAddChannel(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverAddContributingSource()
    {
      static const USE_EVENT_DESCRIPTOR description {1218, 0, 0, 5, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverAddContributingSource()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverAddContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint32_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint8_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverAddContributingSource(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverAddContributingSource(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1219, 0, 0, 4, 11, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverCancel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverChannelCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1220, 0, 0, 4, 1, 12, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverChannelCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverChannelCreate(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverChannelCreate(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverChannelCreateMediaChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1221, 0, 0, 4, 0, 12, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverChannelCreateMediaChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelCreateMediaChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverChannelCreateMediaChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverChannelCreateMediaChannel(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverChannelDeliverIncomingPacketToMediaChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1222, 0, 0, 5, 13, 12, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverChannelDeliverIncomingPacketToMediaChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelDeliverIncomingPacketToMediaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverChannelDeliverIncomingPacketToMediaChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverChannelDeliverIncomingPacketToMediaChannel(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverChannelDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1223, 0, 0, 4, 2, 12, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverChannelDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverChannelDestroy(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverChannelDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverChannelInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1224, 0, 0, 4, 18, 12, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverChannelInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverChannelInternalSecureTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverChannelInternalSecureTransportStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverChannelInternalUpdateEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1225, 0, 0, 4, 18, 12, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverChannelInternalUpdateEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelInternalUpdateEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverChannelInternalUpdateEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverChannelInternalUpdateEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverChannelSendOutgoingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1226, 0, 0, 5, 9, 12, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverChannelSendOutgoingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverChannelSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverChannelSendOutgoingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverChannelSendOutgoingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverCloseChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1227, 0, 0, 4, 12, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverCloseChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCloseChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverCloseChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverCloseChannel(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1228, 0, 0, 4, 1, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[15]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    int64_t xxVal10{(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[10]), &(xxVal10), sizeof(xxVal10)); \
    int64_t xxVal11{(xValue9)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[11]), &(xxVal11), sizeof(xxVal11)); \
    int64_t xxVal12{(xValue10)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[12]), &(xxVal12), sizeof(xxVal12)); \
    int64_t xxVal13{(xValue11)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[13]), &(xxVal13), sizeof(xxVal13)); \
    int64_t xxVal14{(xValue12)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[14]), &(xxVal14), sizeof(xxVal14)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverCreate(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverCreate(), &(xxDescriptors[0]), 15); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverCreateChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1229, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverCreateChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverCreateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverCreateChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverCreateChannel(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverDeliverIncomingPacketToChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1230, 0, 0, 5, 13, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverDeliverIncomingPacketToChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverDeliverIncomingPacketToChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverDeliverIncomingPacketToChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverDeliverIncomingPacketToChannel(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1231, 0, 0, 4, 1, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverDestroy(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverErrorEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1232, 0, 0, 2, 15, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverErrorEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverErrorEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverErrorEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverFindMapping()
    {
      static const USE_EVENT_DESCRIPTOR description {1233, 0, 0, 5, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverFindMapping()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFindMapping(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverFindMapping(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverFindMapping(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverFoundMappingByPayloadType()
    {
      static const USE_EVENT_DESCRIPTOR description {1234, 0, 0, 5, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverFoundMappingByPayloadType()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingByPayloadType(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint8_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverFoundMappingByPayloadType(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverFoundMappingByPayloadType(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverFoundMappingByRid()
    {
      static const USE_EVENT_DESCRIPTOR description {1235, 0, 0, 5, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverFoundMappingByRid()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingByRid(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverFoundMappingByRid(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverFoundMappingByRid(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverFoundMappingBySsrc()
    {
      static const USE_EVENT_DESCRIPTOR description {1236, 0, 0, 5, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverFoundMappingBySsrc()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverFoundMappingBySsrc(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverFoundMappingBySsrc(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverFoundMappingBySsrc(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverInternalChannelGoneEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1237, 0, 0, 5, 18, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverInternalChannelGoneEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalChannelGoneEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverInternalChannelGoneEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverInternalChannelGoneEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1238, 0, 0, 4, 18, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverInternalSecureTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverInternalSecureTransportStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverInternalTimerEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1239, 0, 0, 5, 18, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverInternalTimerEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalTimerEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverInternalTimerEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverInternalTimerEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverInternalWakeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1240, 0, 0, 5, 18, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverInternalWakeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverInternalWakeEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverInternalWakeEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverReceive()
    {
      static const USE_EVENT_DESCRIPTOR description {1241, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverReceive()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReceive(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverReceive(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverReceive(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverRegisterHeaderExtension()
    {
      static const USE_EVENT_DESCRIPTOR description {1242, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverRegisterHeaderExtension()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRegisterHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverRegisterHeaderExtension(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverRegisterHeaderExtension(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverRemoveChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1243, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverRemoveChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRemoveChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverRemoveChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverRemoveChannel(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverRemoveContributingSource()
    {
      static const USE_EVENT_DESCRIPTOR description {1244, 0, 0, 5, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverRemoveContributingSource()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverRemoveContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint32_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint8_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverRemoveContributingSource(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverRemoveContributingSource(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverReportCodec()
    {
      static const USE_EVENT_DESCRIPTOR description {1245, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverReportCodec()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportCodec(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[10]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint8_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    int64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint64_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverReportCodec(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverReportCodec(), &(xxDescriptors[0]), 10); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverReportHeaderExtension()
    {
      static const USE_EVENT_DESCRIPTOR description {1246, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverReportHeaderExtension()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportHeaderExtension(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverReportHeaderExtension(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverReportHeaderExtension(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverReportRtcpFeedback()
    {
      static const USE_EVENT_DESCRIPTOR description {1247, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverReportRtcpFeedback()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverReportRtcpFeedback(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverReportRtcpFeedback(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverReportRtcpFeedback(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverSendOutgoingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1248, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverSendOutgoingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverSendOutgoingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverSendOutgoingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverSetTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1249, 0, 0, 4, 21, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverSetTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSetTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverSetTransport(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverSetTransport(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverSsrcTableEntryAdded()
    {
      static const USE_EVENT_DESCRIPTOR description {1250, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverSsrcTableEntryAdded()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryAdded(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint32_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint32_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverSsrcTableEntryAdded(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverSsrcTableEntryAdded(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverSsrcTableEntryRemoved()
    {
      static const USE_EVENT_DESCRIPTOR description {1251, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverSsrcTableEntryRemoved()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryRemoved(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[10]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint32_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint32_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    auto xxVal9 = (xValue7); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[9]), xxVal9); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverSsrcTableEntryRemoved(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverSsrcTableEntryRemoved(), &(xxDescriptors[0]), 10); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverSsrcTableEntryUpdated()
    {
      static const USE_EVENT_DESCRIPTOR description {1252, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverSsrcTableEntryUpdated()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverSsrcTableEntryUpdated(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint32_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint32_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    auto xxVal8 = (xValue6); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[8]), xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverSsrcTableEntryUpdated(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverSsrcTableEntryUpdated(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1253, 0, 0, 4, 19, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1254, 0, 0, 4, 20, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverStep(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverStop()
    {
      static const USE_EVENT_DESCRIPTOR description {1255, 0, 0, 4, 2, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverStop()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpReceiverStop(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverStop(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverTrackActiveChannelChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1256, 0, 0, 5, 18, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverTrackActiveChannelChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverTrackActiveChannelChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverTrackActiveChannelChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverTrackActiveChannelChangedEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverUnhandledEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1257, 0, 0, 4, 16, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverUnhandledEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUnhandledEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    uint32_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint8_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverUnhandledEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverUnhandledEvent(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverUpdateChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1258, 0, 0, 4, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverUpdateChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUpdateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpReceiverUpdateChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverUpdateChannel(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpReceiverUpdateContributingSource()
    {
      static const USE_EVENT_DESCRIPTOR description {1259, 0, 0, 5, 0, 11, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpReceiverUpdateContributingSource()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpReceiverUpdateContributingSource(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint32_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint8_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpReceiverUpdateContributingSource(), ::zsLib::eventing::getEventParameterDescriptor_RtpReceiverUpdateContributingSource(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderAddChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1260, 0, 0, 4, 0, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderAddChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderAddChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderAddChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderAddChannel(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderAttachTrackSenderChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1261, 0, 0, 4, 0, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderAttachTrackSenderChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderAttachTrackSenderChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderAttachTrackSenderChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderAttachTrackSenderChannel(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1262, 0, 0, 4, 11, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderCancel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderChannelChangeTrack()
    {
      static const USE_EVENT_DESCRIPTOR description {1263, 0, 0, 4, 18, 14, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderChannelChangeTrack()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelChangeTrack(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderChannelChangeTrack(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderChannelChangeTrack(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderChannelCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1264, 0, 0, 4, 1, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderChannelCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderChannelCreate(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderChannelCreate(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderChannelCreateMediaChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1265, 0, 0, 4, 0, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderChannelCreateMediaChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelCreateMediaChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderChannelCreateMediaChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderChannelCreateMediaChannel(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderChannelDeliverIncomingPacketToMediaChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1266, 0, 0, 5, 13, 14, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderChannelDeliverIncomingPacketToMediaChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelDeliverIncomingPacketToMediaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpSenderChannelDeliverIncomingPacketToMediaChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderChannelDeliverIncomingPacketToMediaChannel(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderChannelDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1267, 0, 0, 4, 2, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderChannelDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderChannelDestroy(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderChannelDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderChannelInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1268, 0, 0, 4, 18, 14, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderChannelInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderChannelInternalSecureTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderChannelInternalSecureTransportStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderChannelInternalUpdateEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1269, 0, 0, 4, 18, 14, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderChannelInternalUpdateEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelInternalUpdateEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderChannelInternalUpdateEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderChannelInternalUpdateEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderChannelSendOutgoingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1270, 0, 0, 5, 9, 14, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderChannelSendOutgoingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderChannelSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpSenderChannelSendOutgoingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderChannelSendOutgoingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1271, 0, 0, 4, 1, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderCreate(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderCreate(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderDeliverIncomingPacketToChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1272, 0, 0, 5, 13, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderDeliverIncomingPacketToChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDeliverIncomingPacketToChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpSenderDeliverIncomingPacketToChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderDeliverIncomingPacketToChannel(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1273, 0, 0, 4, 2, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderDestroy(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderDetachTrackSenderChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1274, 0, 0, 4, 0, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderDetachTrackSenderChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderDetachTrackSenderChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderDetachTrackSenderChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderDetachTrackSenderChannel(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderErrorEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1275, 0, 0, 2, 15, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderErrorEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Error, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderErrorEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderErrorEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1276, 0, 0, 5, 240, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpSenderIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderIncomingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderInternalChannelGoneEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1277, 0, 0, 4, 18, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderInternalChannelGoneEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalChannelGoneEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderInternalChannelGoneEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderInternalChannelGoneEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderInternalDestroyChannelEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1278, 0, 0, 4, 18, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderInternalDestroyChannelEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalDestroyChannelEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderInternalDestroyChannelEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderInternalDestroyChannelEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1279, 0, 0, 4, 18, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderInternalSecureTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderInternalSecureTransportStateChangedEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderInternalWakeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1280, 0, 0, 4, 18, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderInternalWakeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderInternalWakeEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderInternalWakeEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderRemoveChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1281, 0, 0, 4, 0, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderRemoveChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderRemoveChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderRemoveChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderRemoveChannel(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderSend()
    {
      static const USE_EVENT_DESCRIPTOR description {1282, 0, 0, 4, 0, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderSend()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSend(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderSend(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderSend(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderSendOutgoingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1283, 0, 0, 5, 9, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderSendOutgoingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_RtpSenderSendOutgoingPacket(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderSendOutgoingPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderSetTrack()
    {
      static const USE_EVENT_DESCRIPTOR description {1284, 0, 0, 4, 21, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderSetTrack()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSetTrack(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderSetTrack(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderSetTrack(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderSetTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1285, 0, 0, 4, 2, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderSetTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSetTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderSetTransport(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderSetTransport(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderSsrcConflictEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1286, 0, 0, 3, 16, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderSsrcConflictEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderSsrcConflictEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint32_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Warning, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderSsrcConflictEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderSsrcConflictEvent(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1287, 0, 0, 4, 19, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderStop()
    {
      static const USE_EVENT_DESCRIPTOR description {1288, 0, 0, 4, 12, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderStop()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_RtpSenderStop(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderStop(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_RtpSenderUpdateChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1289, 0, 0, 4, 0, 13, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_RtpSenderUpdateChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_RtpSenderUpdateChannel(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_RtpSenderUpdateChannel(), ::zsLib::eventing::getEventParameterDescriptor_RtpSenderUpdateChannel(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpInitCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1290, 0, 0, 4, 11, 15, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpInitCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpInitCancel(), ::zsLib::eventing::getEventParameterDescriptor_SctpInitCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpInitCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1291, 0, 0, 4, 1, 15, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpInitCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpInitCreate(), ::zsLib::eventing::getEventParameterDescriptor_SctpInitCreate(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpInitDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1292, 0, 0, 4, 2, 15, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpInitDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpInitDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpInitDestroy(), ::zsLib::eventing::getEventParameterDescriptor_SctpInitDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportBufferIncomingDataPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1293, 0, 0, 5, 10, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportBufferIncomingDataPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportBufferIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    uint32_t xxVal5 {static_cast<uint32_t>(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[5]), xxVal4, xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportBufferIncomingDataPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportBufferIncomingDataPacket(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1294, 0, 0, 4, 11, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportCancel(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1295, 0, 0, 4, 1, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint16_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint16_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportCreate(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportCreate(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportDataChannelEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1296, 0, 0, 4, 16, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportDataChannelEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDataChannelEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportDataChannelEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportDataChannelEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportDeliverIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1297, 0, 0, 5, 13, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportDeliverIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDeliverIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[11]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint32_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    int64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    auto xxVal9 = (xValue7); \
    uint32_t xxVal10 {static_cast<uint32_t>(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal10), sizeof(xxVal10)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[10]), xxVal9, xxVal10); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportDeliverIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportDeliverIncomingPacket(), &(xxDescriptors[0]), 11); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1298, 0, 0, 4, 2, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportDestroy(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportDisposeBufferedIncomingDataPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1299, 0, 0, 5, 14, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportDisposeBufferedIncomingDataPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportDisposeBufferedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    uint32_t xxVal5 {static_cast<uint32_t>(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[5]), xxVal4, xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportDisposeBufferedIncomingDataPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportDisposeBufferedIncomingDataPacket(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportErrorEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1300, 0, 0, 4, 19, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportErrorEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportErrorEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportErrorEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportErrorEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1301, 0, 0, 5, 18, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportInternalSecureTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalSecureTransportStateChangedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportInternalSecureTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportInternalSecureTransportStateChangedEvent(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportInternalShutdownEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1302, 0, 0, 4, 18, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportInternalShutdownEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalShutdownEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportInternalShutdownEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportInternalShutdownEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportInternalWakeEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1303, 0, 0, 4, 18, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportInternalWakeEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportInternalWakeEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportInternalWakeEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportInternalWakeEvent(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerCancel()
    {
      static const USE_EVENT_DESCRIPTOR description {1304, 0, 0, 4, 11, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerCancel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerCancel(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerCancel(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1305, 0, 0, 4, 1, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint16_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerCreate(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerCreate(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerDeliverIncomingDataPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1306, 0, 0, 5, 240, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerDeliverIncomingDataPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerDeliverIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerDeliverIncomingDataPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerDeliverIncomingDataPacket(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1307, 0, 0, 4, 2, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerDestroy(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerListen()
    {
      static const USE_EVENT_DESCRIPTOR description {1308, 0, 0, 4, 21, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerListen()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerListen(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint16_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint16_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerListen(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerListen(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerReceivedIncomingDataPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1309, 0, 0, 5, 240, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerReceivedIncomingDataPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerReceivedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    uint32_t xxVal5 {static_cast<uint32_t>(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[5]), xxVal4, xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerReceivedIncomingDataPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerReceivedIncomingDataPacket(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerRegisterNewTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1310, 0, 0, 4, 0, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerRegisterNewTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerRegisterNewTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerRegisterNewTransport(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerRegisterNewTransport(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerSctpTransportCreatedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1311, 0, 0, 4, 240, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerSctpTransportCreatedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportCreatedEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerSctpTransportCreatedEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerSctpTransportCreatedEvent(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerSctpTransportEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1312, 0, 0, 4, 18, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerSctpTransportEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerSctpTransportEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerSctpTransportEvent(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerSctpTransportShutdownEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1313, 0, 0, 4, 18, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerSctpTransportShutdownEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerSctpTransportShutdownEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerSctpTransportShutdownEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerSctpTransportShutdownEvent(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportListenerStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1314, 0, 0, 4, 20, 17, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportListenerStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportListenerStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_SctpTransportListenerStep(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportListenerStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportReceivedIncomingDataPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1315, 0, 0, 5, 240, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportReceivedIncomingDataPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportReceivedIncomingDataPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    uint32_t xxVal5 {static_cast<uint32_t>(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[5]), xxVal4, xxVal5); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportReceivedIncomingDataPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportReceivedIncomingDataPacket(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportReceivedIncomingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1316, 0, 0, 5, 240, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportReceivedIncomingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportReceivedIncomingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[10]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint32_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    int64_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    auto xxVal8 = (xValue6); \
    uint32_t xxVal9 {static_cast<uint32_t>(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal9), sizeof(xxVal9)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[9]), xxVal8, xxVal9); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportReceivedIncomingPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportReceivedIncomingPacket(), &(xxDescriptors[0]), 10); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportRegisterNewDataChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1317, 0, 0, 4, 0, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportRegisterNewDataChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportRegisterNewDataChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportRegisterNewDataChannel(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportRegisterNewDataChannel(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportSendOutgoingDataPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1318, 0, 0, 4, 9, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportSendOutgoingDataPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportSendOutgoingDataPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    uint32_t xxVal6 {static_cast<uint32_t>(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[6]), xxVal5, xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportSendOutgoingDataPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportSendOutgoingDataPacket(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportSendOutgoingPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1319, 0, 0, 5, 9, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportSendOutgoingPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_SignedInteger},
        {EventParameterType_Boolean},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportSendOutgoingPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[11]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint16_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal5 {(xValue3) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal7 {(xValue5) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint64_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    auto xxVal9 = (xValue7); \
    uint32_t xxVal10 {static_cast<uint32_t>(xValue8)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal10), sizeof(xxVal10)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[10]), xxVal9, xxVal10); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SctpTransportSendOutgoingPacket(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportSendOutgoingPacket(), &(xxDescriptors[0]), 11); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportShutdownDataChannel()
    {
      static const USE_EVENT_DESCRIPTOR description {1320, 0, 0, 4, 0, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportShutdownDataChannel()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportShutdownDataChannel(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[6]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportShutdownDataChannel(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportShutdownDataChannel(), &(xxDescriptors[0]), 6); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportStart()
    {
      static const USE_EVENT_DESCRIPTOR description {1321, 0, 0, 4, 1, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportStart()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStart(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[10]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    uint16_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    uint16_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    uint16_t xxVal7{(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal7), sizeof(xxVal7)); \
    uint16_t xxVal8{(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[8]), &(xxVal8), sizeof(xxVal8)); \
    uint16_t xxVal9{(xValue7)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[9]), &(xxVal9), sizeof(xxVal9)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportStart(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportStart(), &(xxDescriptors[0]), 10); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportStateChangedEvent()
    {
      static const USE_EVENT_DESCRIPTOR description {1322, 0, 0, 4, 19, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportStateChangedEvent()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    auto xxVal4 = (xValue2); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[4]), xxVal4); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportStateChangedEvent(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportStateChangedEvent(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportStep()
    {
      static const USE_EVENT_DESCRIPTOR description {1323, 0, 0, 4, 20, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportStep()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStep(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_SctpTransportStep(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportStep(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SctpTransportStop()
    {
      static const USE_EVENT_DESCRIPTOR description {1324, 0, 0, 4, 2, 16, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SctpTransportStop()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SctpTransportStop(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SctpTransportStop(), ::zsLib::eventing::getEventParameterDescriptor_SctpTransportStop(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SrtpTransportCreate()
    {
      static const USE_EVENT_DESCRIPTOR description {1325, 0, 0, 4, 1, 18, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SrtpTransportCreate()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportCreate(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SrtpTransportCreate(), ::zsLib::eventing::getEventParameterDescriptor_SrtpTransportCreate(), &(xxDescriptors[0]), 5); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SrtpTransportDeliverIncomingDecryptedPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1326, 0, 0, 5, 13, 18, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SrtpTransportDeliverIncomingDecryptedPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportDeliverIncomingDecryptedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SrtpTransportDeliverIncomingDecryptedPacket(), ::zsLib::eventing::getEventParameterDescriptor_SrtpTransportDeliverIncomingDecryptedPacket(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SrtpTransportDestroy()
    {
      static const USE_EVENT_DESCRIPTOR description {1327, 0, 0, 4, 2, 18, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SrtpTransportDestroy()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_SrtpTransportDestroy(), ::zsLib::eventing::getEventParameterDescriptor_SrtpTransportDestroy(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SrtpTransportReceivedIncomingEncryptedPacket()
    {
      static const USE_EVENT_DESCRIPTOR description {1328, 0, 0, 5, 240, 18, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SrtpTransportReceivedIncomingEncryptedPacket()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportReceivedIncomingEncryptedPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SrtpTransportReceivedIncomingEncryptedPacket(), ::zsLib::eventing::getEventParameterDescriptor_SrtpTransportReceivedIncomingEncryptedPacket(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SrtpTransportSendOutgoingEncryptedPacketViaSecureTransport()
    {
      static const USE_EVENT_DESCRIPTOR description {1329, 0, 0, 5, 9, 18, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SrtpTransportSendOutgoingEncryptedPacketViaSecureTransport()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportSendOutgoingEncryptedPacketViaSecureTransport(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[9]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    auto xxVal7 = (xValue5); \
    uint32_t xxVal8 {static_cast<uint32_t>(xValue6)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[7]), &(xxVal8), sizeof(xxVal8)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[8]), xxVal7, xxVal8); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SrtpTransportSendOutgoingEncryptedPacketViaSecureTransport(), ::zsLib::eventing::getEventParameterDescriptor_SrtpTransportSendOutgoingEncryptedPacketViaSecureTransport(), &(xxDescriptors[0]), 9); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_SrtpTransportSendOutgoingPacketAndEncrypt()
    {
      static const USE_EVENT_DESCRIPTOR description {1330, 0, 0, 5, 9, 18, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_SrtpTransportSendOutgoingPacketAndEncrypt()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_SignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_Binary}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_SrtpTransportSendOutgoingPacketAndEncrypt(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Trace)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[8]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    int64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    int64_t xxVal5{(xValue3)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[5]), &(xxVal5), sizeof(xxVal5)); \
    auto xxVal6 = (xValue4); \
    uint32_t xxVal7 {static_cast<uint32_t>(xValue5)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal7), sizeof(xxVal7)); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_BUFFER(&(xxDescriptors[7]), xxVal6, xxVal7); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Trace, ::zsLib::eventing::getEventDescriptor_SrtpTransportSendOutgoingPacketAndEncrypt(), ::zsLib::eventing::getEventParameterDescriptor_SrtpTransportSendOutgoingPacketAndEncrypt(), &(xxDescriptors[0]), 8); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_cRtpListenerRegisterSender()
    {
      static const USE_EVENT_DESCRIPTOR description {1331, 0, 0, 4, 0, 9, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_cRtpListenerRegisterSender()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_UnsignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_cRtpListenerRegisterSender(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLib(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[5]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    uint64_t xxVal3{(xValue1)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[3]), &(xxVal3), sizeof(xxVal3)); \
    uint64_t xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLib(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_cRtpListenerRegisterSender(), ::zsLib::eventing::getEventParameterDescriptor_cRtpListenerRegisterSender(), &(xxDescriptors[0]), 5); \
  }

  } // namespace eventing
} // namespace zsLib

