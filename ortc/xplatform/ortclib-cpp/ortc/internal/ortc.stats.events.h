// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>
#include <zsLib/eventing/Log.h>
#include <stdint.h>

namespace zsLib {
  namespace eventing {


    inline zsLib::Log::ProviderHandle &getEventHandle_OrtcLibStatsReport()
    {
      static zsLib::Log::ProviderHandle gHandle {};
      return gHandle;
    }

#define ZS_INTERNAL_REGISTER_EVENTING_OrtcLibStatsReport() \
    { \
      ZS_EVENTING_REGISTER_EVENT_WRITER(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), "12ceb95f-6bcf-4083-90f1-b757c405c461", "OrtcLibStatsReport", "224fa7f490c1176ac51bc40ff6523dd49b4fbc06ec1ea9b0b8644968a07cad5f"); \
    }

#define ZS_INTERNAL_UNREGISTER_EVENTING_OrtcLibStatsReport() ZS_EVENTING_UNREGISTER_EVENT_WRITER(::zsLib::eventing::getEventHandle_OrtcLibStatsReport())


    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_OrtcStatsReportCommand()
    {
      static const USE_EVENT_DESCRIPTOR description {106, 0, 0, 4, 1, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_OrtcStatsReportCommand()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_OrtcStatsReportCommand(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), (0x8000000000000000ULL), Detail)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[4]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), Informational, Detail, ::zsLib::eventing::getEventDescriptor_OrtcStatsReportCommand(), ::zsLib::eventing::getEventParameterDescriptor_OrtcStatsReportCommand(), &(xxDescriptors[0]), 4); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_StatsReportBool()
    {
      static const USE_EVENT_DESCRIPTOR description {105, 0, 0, 4, 0, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_StatsReportBool()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_FloatingPoint},
        {EventParameterType_AString},
        {EventParameterType_Boolean}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_StatsReportBool(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    double xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    ::zsLib::eventing::USE_EVENT_DATA_BOOL_TYPE xxVal6 {(xValue4) ? 1 : 0}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_StatsReportBool(), ::zsLib::eventing::getEventParameterDescriptor_StatsReportBool(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_StatsReportFloat()
    {
      static const USE_EVENT_DESCRIPTOR description {103, 0, 0, 4, 0, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_StatsReportFloat()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_FloatingPoint},
        {EventParameterType_AString},
        {EventParameterType_FloatingPoint}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_StatsReportFloat(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    double xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    float xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_StatsReportFloat(), ::zsLib::eventing::getEventParameterDescriptor_StatsReportFloat(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_StatsReportInt32()
    {
      static const USE_EVENT_DESCRIPTOR description {101, 0, 0, 4, 0, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_StatsReportInt32()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_FloatingPoint},
        {EventParameterType_AString},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_StatsReportInt32(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    double xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    int32_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_StatsReportInt32(), ::zsLib::eventing::getEventParameterDescriptor_StatsReportInt32(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_StatsReportInt64()
    {
      static const USE_EVENT_DESCRIPTOR description {102, 0, 0, 4, 0, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_StatsReportInt64()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_FloatingPoint},
        {EventParameterType_AString},
        {EventParameterType_SignedInteger}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_StatsReportInt64(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    double xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    int64_t xxVal6{(xValue4)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[6]), &(xxVal6), sizeof(xxVal6)); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_StatsReportInt64(), ::zsLib::eventing::getEventParameterDescriptor_StatsReportInt64(), &(xxDescriptors[0]), 7); \
  }

    inline const USE_EVENT_DESCRIPTOR *getEventDescriptor_StatsReportString()
    {
      static const USE_EVENT_DESCRIPTOR description {104, 0, 0, 4, 0, 1, (0x8000000000000000ULL)};
      return &description;
    }

    inline const USE_EVENT_PARAMETER_DESCRIPTOR *getEventParameterDescriptor_StatsReportString()
    {
      static const USE_EVENT_PARAMETER_DESCRIPTOR descriptions [] =
      {
        {EventParameterType_AString},
        {EventParameterType_AString},
        {EventParameterType_UnsignedInteger},
        {EventParameterType_AString},
        {EventParameterType_FloatingPoint},
        {EventParameterType_AString},
        {EventParameterType_AString}
      };
      return &(descriptions[0]);
    }

#define ZS_INTERNAL_EVENTING_EVENT_StatsReportString(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), (0x8000000000000000ULL), Debug)) { \
    ::zsLib::eventing::USE_EVENT_DATA_DESCRIPTOR xxDescriptors[7]; \
    uint32_t xxLineNumber = __LINE__; \
    \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[0]), (ZS_GET_SUBSYSTEM()).getName()); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[1]), __func__); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[2]), &xxLineNumber, sizeof(xxLineNumber)); \
    \
    auto xxVal3 = (xValue1); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[3]), xxVal3); \
    double xxVal4{(xValue2)}; \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_VALUE(&(xxDescriptors[4]), &(xxVal4), sizeof(xxVal4)); \
    auto xxVal5 = (xValue3); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[5]), xxVal5); \
    auto xxVal6 = (xValue4); \
    ZS_EVENTING_EVENT_DATA_DESCRIPTOR_FILL_ASTR(&(xxDescriptors[6]), xxVal6); \
    ZS_EVENTING_WRITE_EVENT(::zsLib::eventing::getEventHandle_OrtcLibStatsReport(), Informational, Debug, ::zsLib::eventing::getEventDescriptor_StatsReportString(), ::zsLib::eventing::getEventParameterDescriptor_StatsReportString(), &(xxDescriptors[0]), 7); \
  }

  } // namespace eventing
} // namespace zsLib

